{"version":3,"sources":["webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?516d","webpack://_N_E/./pages/viewer.tsx"],"names":["window","__NEXT_P","push","Container","styled","div","Content","Viewer","props","state","editorManager","useLazyValue","EditorManager","create","useEffect","destroy","modalManager","useRequiredContext","ModalManagerContext","spawnSettingsModal","spawn","render","router","useRouter","useObserver","value","title","description","name","content","items","to","encodeURIComponent","String","query","data","handler"],"mappings":"gGACOA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,UACA,WACE,OAAO,EAAQ,Y,+TCczB,MAAMC,EAAYC,IAAOC,IAAV,oCAAGD,CAAH,gEAOTE,EAAUF,IAAOC,IAAV,oCAAGD,CAAH,a,SAQE,SAASG,EAAOC,GAC7B,MAAM,MAAEC,GAAUD,EAEZE,EAAgBC,aAAa,IAAMC,IAAcC,OAAOJ,KAC9DK,qBAAU,IAAM,IAAMC,kBAAQL,IAAgB,CAACA,IAE/C,MAAMM,EAAeC,YAAmBC,KAClCC,EAAqB,IACzBH,EAAaI,MAAM,CAAEC,OAAQ,IAAM,cAAC,IAAD,MAE/BC,EAASC,sBAEf,OAAOC,aAAY,IACjB,eAAC,IAAD,CAAuBC,MAAOf,EAA9B,UACE,cAAC,IAAD,CACEgB,MAAM,iBACNC,YAAY,yCAFd,SAIE,sBAAqBC,KAAK,WAAWC,QAAQ,iBAAnC,cAEZ,eAAC1B,EAAD,WACE,cAAC,IAAD,CACE2B,MAAO,CACL,CACEF,KAAM,SACNG,GAAK,UAASC,mBAAmBC,OAAOX,EAAOY,MAAMC,UAEvD,CAAEP,KAAM,WAAYQ,QAASjB,MAGjC,cAACb,EAAD,UACE,cAAC,IAAD,MAEF,cAAC,IAAD,e","file":"static/chunks/pages/viewer-b13b410bb57755725f40.js","sourcesContent":["\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/viewer\",\n        function () {\n          return require(\"private-next-pages/viewer.tsx\");\n        }\n      ]);\n    ","import { useObserver } from \"mobx-react-lite\"\r\nimport { destroy, getSnapshot, SnapshotOut } from \"mobx-state-tree\"\r\nimport type { GetServerSidePropsContext } from \"next\"\r\nimport { useRouter } from \"next/router\"\r\nimport React, { useEffect } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { ModalManagerContext } from \"../common/modal/ModalManagerContext\"\r\nimport { Footer } from \"../common/page/Footer\"\r\nimport { Header } from \"../common/page/Header\"\r\nimport { PageHead } from \"../common/page/PageHead\"\r\nimport { PreferencesModal } from \"../common/settings/PreferencesModal\"\r\nimport { useLazyValue } from \"../common/state/useLazyValue\"\r\nimport { useRequiredContext } from \"../common/state/useRequiredContext\"\r\nimport { EditorManager } from \"../modules/editor/EditorManager\"\r\nimport { EditorManagerProvider } from \"../modules/editor/EditorManagerContext\"\r\nimport { getEditorManagerFromQuery } from \"../modules/editor/getEditorManagerFromQuery\"\r\nimport { Preview } from \"../modules/message/preview/Preview\"\r\n\r\nconst Container = styled.div`\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-flow: column;\r\n`\r\n\r\nconst Content = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport type ViewerProps = {\r\n  state: SnapshotOut<typeof EditorManager>\r\n}\r\n\r\nexport default function Viewer(props: ViewerProps) {\r\n  const { state } = props\r\n\r\n  const editorManager = useLazyValue(() => EditorManager.create(state))\r\n  useEffect(() => () => destroy(editorManager), [editorManager])\r\n\r\n  const modalManager = useRequiredContext(ModalManagerContext)\r\n  const spawnSettingsModal = () =>\r\n    modalManager.spawn({ render: () => <PreferencesModal /> })\r\n\r\n  const router = useRouter()\r\n\r\n  return useObserver(() => (\r\n    <EditorManagerProvider value={editorManager}>\r\n      <PageHead\r\n        title=\"Message Viewer\"\r\n        description=\"Discohook's standalone message viewer.\"\r\n      >\r\n        <meta key=\"referrer\" name=\"referrer\" content=\"strict-origin\" />\r\n      </PageHead>\r\n      <Container>\r\n        <Header\r\n          items={[\r\n            {\r\n              name: \"Editor\",\r\n              to: `/?data=${encodeURIComponent(String(router.query.data))}`,\r\n            },\r\n            { name: \"Settings\", handler: spawnSettingsModal },\r\n          ]}\r\n        />\r\n        <Content>\r\n          <Preview />\r\n        </Content>\r\n        <Footer />\r\n      </Container>\r\n    </EditorManagerProvider>\r\n  ))\r\n}\r\n\r\nexport const getServerSideProps = (\r\n  context: GetServerSidePropsContext,\r\n): { props: ViewerProps } => {\r\n  return {\r\n    props: {\r\n      state: getSnapshot(getEditorManagerFromQuery(context.query)),\r\n    },\r\n  }\r\n}\r\n"],"sourceRoot":""}