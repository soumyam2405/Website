{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useObserver } from \"mobx-react-lite\";\nimport React, { useRef, useState } from \"react\";\nimport styled, { useTheme } from \"styled-components\";\nimport { PopoverContainer } from \"../../popover/PopoverContainer\";\nimport { usePopover } from \"../../popover/usePopover\";\nimport { useAutorun } from \"../../state/useAutorun\";\nimport { Input } from \"../layout/Input\";\nimport { InputField } from \"../text/InputField\";\nimport { ColorPicker } from \"./ColorPicker\";\nconst RGB_STRING_RE = /^([01]?\\d{1,2}|2[0-4]\\d|25[0-5])[\\s,]\\s*([01]?\\d{1,2}|2[0-4]\\d|25[0-5])[\\s,]\\s*([01]?\\d{1,2}|2[0-4]\\d|25[0-5])$/;\nconst MonoInputField = styled(InputField).withConfig({\n  componentId: \"sc-15if2js-0\"\n})([\"& \", \"{font-size:15px;font-family:\", \";}\"], Input, ({\n  theme\n}) => theme.font.mono);\nconst Preview = styled.div.withConfig({\n  componentId: \"sc-15if2js-1\"\n})([\"min-width:36px;max-width:36px;min-height:36px;max-height:36px;border-radius:4px;box-shadow:inset \", \";margin-left:8px;\"], ({\n  theme\n}) => theme.elavation.stroke);\nexport function ColorInputField(props) {\n  const {\n    id,\n    color,\n    label\n  } = props;\n  const {\n    0: value,\n    1: setValue\n  } = useState(() => {\n    var _color$hex;\n\n    return (_color$hex = color.hex) !== null && _color$hex !== void 0 ? _color$hex : \"\";\n  });\n  const {\n    0: touched,\n    1: setTouched\n  } = useState(false);\n  useAutorun(() => {\n    var _color$hex2;\n\n    if (!touched) setValue((_color$hex2 = color.hex) !== null && _color$hex2 !== void 0 ? _color$hex2 : \"\");\n  });\n  const inputRef = useRef(null);\n  const popover = usePopover({\n    ref: inputRef,\n    render: () => /*#__PURE__*/_jsx(PopoverContainer, {\n      children: /*#__PURE__*/_jsx(ColorPicker, {\n        color: color\n      })\n    }),\n    placement: \"bottom-start\",\n    shards: [inputRef]\n  });\n  const theme = useTheme();\n  return useObserver(() => {\n    var _color$hex4;\n\n    return /*#__PURE__*/_jsx(MonoInputField, {\n      ref: inputRef,\n      id: id,\n      value: value,\n      onChange: value => {\n        setTouched(true);\n        setValue(value.toLowerCase());\n\n        if (/^#?[\\da-f]{6}$/i.test(value)) {\n          color.setHex(value);\n        } else if (!value) {\n          color.invalidate();\n        } else {\n          const match = RGB_STRING_RE.exec(value);\n\n          if (match) {\n            const [, red, green, blue] = [...match].map(Number);\n            color.setRaw(red * 0x010000 + green * 0x000100 + blue);\n          }\n        }\n      },\n      onBlur: () => {\n        var _color$hex3;\n\n        setTouched(false);\n        setValue((_color$hex3 = color.hex) !== null && _color$hex3 !== void 0 ? _color$hex3 : \"\");\n      },\n      label: label,\n      placeholder: \"#rrggbb\",\n      onClick: () => {\n        popover.spawn();\n      },\n      children: /*#__PURE__*/_jsx(Preview, {\n        role: \"presentation\",\n        style: {\n          backgroundColor: (_color$hex4 = color.hex) !== null && _color$hex4 !== void 0 ? _color$hex4 : theme.background.tertiary\n        },\n        onClick: () => {\n          popover.spawn();\n        }\n      })\n    });\n  });\n}","map":{"version":3,"sources":["F:/DiscordHookSite/common/input/color/ColorInputField.tsx"],"names":["useObserver","React","useRef","useState","styled","useTheme","PopoverContainer","usePopover","useAutorun","Input","InputField","ColorPicker","RGB_STRING_RE","MonoInputField","theme","font","mono","Preview","div","elavation","stroke","ColorInputField","props","id","color","label","value","setValue","hex","touched","setTouched","inputRef","popover","ref","render","placement","shards","toLowerCase","test","setHex","invalidate","match","exec","red","green","blue","map","Number","setRaw","spawn","backgroundColor","background","tertiary"],"mappings":"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","sourcesContent":["import { useObserver } from \"mobx-react-lite\"\r\nimport React, { useRef, useState } from \"react\"\r\nimport styled, { useTheme } from \"styled-components\"\r\nimport { PopoverContainer } from \"../../popover/PopoverContainer\"\r\nimport { usePopover } from \"../../popover/usePopover\"\r\nimport { useAutorun } from \"../../state/useAutorun\"\r\nimport { Input } from \"../layout/Input\"\r\nimport { InputField } from \"../text/InputField\"\r\nimport type { ColorLike } from \"./ColorModel\"\r\nimport { ColorPicker } from \"./ColorPicker\"\r\n\r\nconst RGB_STRING_RE = /^([01]?\\d{1,2}|2[0-4]\\d|25[0-5])[\\s,]\\s*([01]?\\d{1,2}|2[0-4]\\d|25[0-5])[\\s,]\\s*([01]?\\d{1,2}|2[0-4]\\d|25[0-5])$/\r\n\r\nconst MonoInputField = styled(InputField)`\r\n  & ${Input} {\r\n    font-size: 15px;\r\n    font-family: ${({ theme }) => theme.font.mono};\r\n  }\r\n`\r\n\r\nconst Preview = styled.div`\r\n  min-width: 36px;\r\n  max-width: 36px;\r\n  min-height: 36px;\r\n  max-height: 36px;\r\n\r\n  border-radius: 4px;\r\n\r\n  box-shadow: inset ${({ theme }) => theme.elavation.stroke};\r\n\r\n  margin-left: 8px;\r\n`\r\n\r\nexport type ColorInputProps = {\r\n  id: string\r\n  color: ColorLike\r\n  label: string\r\n}\r\n\r\nexport function ColorInputField(props: ColorInputProps) {\r\n  const { id, color, label } = props\r\n\r\n  const [value, setValue] = useState(() => color.hex ?? \"\")\r\n  const [touched, setTouched] = useState(false)\r\n\r\n  useAutorun(() => {\r\n    if (!touched) setValue(color.hex ?? \"\")\r\n  })\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n  const popover = usePopover({\r\n    ref: inputRef,\r\n    render: () => (\r\n      <PopoverContainer>\r\n        <ColorPicker color={color} />\r\n      </PopoverContainer>\r\n    ),\r\n    placement: \"bottom-start\",\r\n    shards: [inputRef],\r\n  })\r\n\r\n  const theme = useTheme()\r\n\r\n  return useObserver(() => (\r\n    <MonoInputField\r\n      ref={inputRef}\r\n      id={id}\r\n      value={value}\r\n      onChange={value => {\r\n        setTouched(true)\r\n        setValue(value.toLowerCase())\r\n\r\n        if (/^#?[\\da-f]{6}$/i.test(value)) {\r\n          color.setHex(value)\r\n        } else if (!value) {\r\n          color.invalidate()\r\n        } else {\r\n          const match = RGB_STRING_RE.exec(value)\r\n          if (match) {\r\n            const [, red, green, blue] = [...match].map(Number)\r\n            color.setRaw(red * 0x010000 + green * 0x000100 + blue)\r\n          }\r\n        }\r\n      }}\r\n      onBlur={() => {\r\n        setTouched(false)\r\n        setValue(color.hex ?? \"\")\r\n      }}\r\n      label={label}\r\n      placeholder=\"#rrggbb\"\r\n      onClick={() => {\r\n        popover.spawn()\r\n      }}\r\n    >\r\n      <Preview\r\n        role=\"presentation\"\r\n        style={{ backgroundColor: color.hex ?? theme.background.tertiary }}\r\n        onClick={() => {\r\n          popover.spawn()\r\n        }}\r\n      />\r\n    </MonoInputField>\r\n  ))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}