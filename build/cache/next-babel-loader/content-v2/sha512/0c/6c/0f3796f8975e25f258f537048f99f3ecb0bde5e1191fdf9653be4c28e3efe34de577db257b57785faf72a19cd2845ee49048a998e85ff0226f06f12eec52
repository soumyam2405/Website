{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\DiscordHookSite\\\\modules\\\\database\\\\backup\\\\modal\\\\BackupsModal.tsx\",\n    _s = $RefreshSig$();\n\nimport { useObserver } from \"mobx-react-lite\";\nimport React, { useRef } from \"react\";\nimport { PrimaryButton } from \"../../../../common/input/button/PrimaryButton\";\nimport { SecondaryButton } from \"../../../../common/input/button/SecondaryButton\";\nimport { ModalAction } from \"../../../../common/modal/layout/ModalAction\";\nimport { ModalBody } from \"../../../../common/modal/layout/ModalBody\";\nimport { ModalContainer } from \"../../../../common/modal/layout/ModalContainer\";\nimport { ModalFooter } from \"../../../../common/modal/layout/ModalFooter\";\nimport { ModalHeader } from \"../../../../common/modal/layout/ModalHeader\";\nimport { ModalTitle } from \"../../../../common/modal/layout/ModalTitle\";\nimport { ModalContext } from \"../../../../common/modal/ModalContext\";\nimport { useLazyValue } from \"../../../../common/state/useLazyValue\";\nimport { useRequiredContext } from \"../../../../common/state/useRequiredContext\";\nimport { remove } from \"../../../../icons/remove\";\nimport { DatabaseManager } from \"../../DatabaseManager\";\nimport { DatabaseManagerProvider } from \"../../DatabaseManagerContext\";\nimport { PersistentStorageWarning } from \"../../persist/PersistentStorageWarning\";\nimport { BackupManager } from \"../BackupManager\";\nimport { BackupManagerProvider } from \"../BackupManagerContext\";\nimport { BackupCreationControls } from \"./BackupCreationControls\";\nimport { BackupList } from \"./BackupList\";\nexport function BackupsModal(props) {\n  _s();\n\n  const {\n    editorManager\n  } = props;\n  const databaseManager = useLazyValue(() => new DatabaseManager());\n  const backupManager = useLazyValue(() => new BackupManager(databaseManager, editorManager));\n  const modal = useRequiredContext(ModalContext);\n  const fileInputRef = useRef(null);\n  return useObserver(() => /*#__PURE__*/_jsxDEV(DatabaseManagerProvider, {\n    value: databaseManager,\n    children: /*#__PURE__*/_jsxDEV(BackupManagerProvider, {\n      value: backupManager,\n      children: /*#__PURE__*/_jsxDEV(ModalContainer, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: fileInputRef,\n          type: \"file\",\n          style: {\n            display: \"none\"\n          },\n          onChange: async event => {\n            var _event$target$files, _event$target$files$i;\n\n            const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : (_event$target$files$i = _event$target$files.item(0)) === null || _event$target$files$i === void 0 ? void 0 : _event$target$files$i.slice();\n            event.target.files = null;\n\n            if (file) {\n              await backupManager.importBackups(file);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalHeader, {\n          children: [/*#__PURE__*/_jsxDEV(ModalTitle, {\n            children: \"Backups\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ModalAction, {\n            icon: remove,\n            label: \"Close\",\n            onClick: () => modal.dismiss()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), databaseManager.shouldShowPersistenceWarning && /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: /*#__PURE__*/_jsxDEV(PersistentStorageWarning, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: /*#__PURE__*/_jsxDEV(BackupList, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: /*#__PURE__*/_jsxDEV(BackupCreationControls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: [/*#__PURE__*/_jsxDEV(SecondaryButton, {\n            onClick: async () => backupManager.exportAll(),\n            children: \"Export All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SecondaryButton, {\n            onClick: () => {\n              var _fileInputRef$current;\n\n              return (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n            },\n            children: \"Import\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(PrimaryButton, {\n            onClick: () => modal.dismiss(),\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this));\n}\n\n_s(BackupsModal, \"6RrRDvbdfuBDsY2uaQsr8m4oR60=\", false, function () {\n  return [useLazyValue, useLazyValue, useRequiredContext, useObserver];\n});\n\n_c = BackupsModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"BackupsModal\");","map":{"version":3,"sources":["F:/DiscordHookSite/modules/database/backup/modal/BackupsModal.tsx"],"names":["useObserver","React","useRef","PrimaryButton","SecondaryButton","ModalAction","ModalBody","ModalContainer","ModalFooter","ModalHeader","ModalTitle","ModalContext","useLazyValue","useRequiredContext","remove","DatabaseManager","DatabaseManagerProvider","PersistentStorageWarning","BackupManager","BackupManagerProvider","BackupCreationControls","BackupList","BackupsModal","props","editorManager","databaseManager","backupManager","modal","fileInputRef","display","event","file","target","files","item","slice","importBackups","dismiss","shouldShowPersistenceWarning","exportAll","current","click"],"mappings":"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","sourcesContent":["import { useObserver } from \"mobx-react-lite\"\r\nimport React, { useRef } from \"react\"\r\nimport { PrimaryButton } from \"../../../../common/input/button/PrimaryButton\"\r\nimport { SecondaryButton } from \"../../../../common/input/button/SecondaryButton\"\r\nimport { ModalAction } from \"../../../../common/modal/layout/ModalAction\"\r\nimport { ModalBody } from \"../../../../common/modal/layout/ModalBody\"\r\nimport { ModalContainer } from \"../../../../common/modal/layout/ModalContainer\"\r\nimport { ModalFooter } from \"../../../../common/modal/layout/ModalFooter\"\r\nimport { ModalHeader } from \"../../../../common/modal/layout/ModalHeader\"\r\nimport { ModalTitle } from \"../../../../common/modal/layout/ModalTitle\"\r\nimport { ModalContext } from \"../../../../common/modal/ModalContext\"\r\nimport { useLazyValue } from \"../../../../common/state/useLazyValue\"\r\nimport { useRequiredContext } from \"../../../../common/state/useRequiredContext\"\r\nimport { remove } from \"../../../../icons/remove\"\r\nimport type { EditorManagerLike } from \"../../../editor/EditorManager\"\r\nimport { DatabaseManager } from \"../../DatabaseManager\"\r\nimport { DatabaseManagerProvider } from \"../../DatabaseManagerContext\"\r\nimport { PersistentStorageWarning } from \"../../persist/PersistentStorageWarning\"\r\nimport { BackupManager } from \"../BackupManager\"\r\nimport { BackupManagerProvider } from \"../BackupManagerContext\"\r\nimport { BackupCreationControls } from \"./BackupCreationControls\"\r\nimport { BackupList } from \"./BackupList\"\r\n\r\nexport type BackupsModalProps = {\r\n  editorManager: EditorManagerLike\r\n}\r\n\r\nexport function BackupsModal(props: BackupsModalProps) {\r\n  const { editorManager } = props\r\n\r\n  const databaseManager = useLazyValue(() => new DatabaseManager())\r\n  const backupManager = useLazyValue(\r\n    () => new BackupManager(databaseManager, editorManager),\r\n  )\r\n\r\n  const modal = useRequiredContext(ModalContext)\r\n\r\n  const fileInputRef = useRef<HTMLInputElement>(null)\r\n\r\n  return useObserver(() => (\r\n    <DatabaseManagerProvider value={databaseManager}>\r\n      <BackupManagerProvider value={backupManager}>\r\n        <ModalContainer>\r\n          <input\r\n            ref={fileInputRef}\r\n            type=\"file\"\r\n            style={{ display: \"none\" }}\r\n            onChange={async event => {\r\n              const file = event.target.files?.item(0)?.slice()\r\n              event.target.files = null\r\n              if (file) {\r\n                await backupManager.importBackups(file)\r\n              }\r\n            }}\r\n          />\r\n          <ModalHeader>\r\n            <ModalTitle>Backups</ModalTitle>\r\n            <ModalAction\r\n              icon={remove}\r\n              label=\"Close\"\r\n              onClick={() => modal.dismiss()}\r\n            />\r\n          </ModalHeader>\r\n          {databaseManager.shouldShowPersistenceWarning && (\r\n            <ModalBody>\r\n              <PersistentStorageWarning />\r\n            </ModalBody>\r\n          )}\r\n          <ModalBody>\r\n            <BackupList />\r\n          </ModalBody>\r\n          <ModalBody>\r\n            <BackupCreationControls />\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <SecondaryButton onClick={async () => backupManager.exportAll()}>\r\n              Export All\r\n            </SecondaryButton>\r\n            <SecondaryButton onClick={() => fileInputRef.current?.click()}>\r\n              Import\r\n            </SecondaryButton>\r\n            <PrimaryButton onClick={() => modal.dismiss()}>Close</PrimaryButton>\r\n          </ModalFooter>\r\n        </ModalContainer>\r\n      </BackupManagerProvider>\r\n    </DatabaseManagerProvider>\r\n  ))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}