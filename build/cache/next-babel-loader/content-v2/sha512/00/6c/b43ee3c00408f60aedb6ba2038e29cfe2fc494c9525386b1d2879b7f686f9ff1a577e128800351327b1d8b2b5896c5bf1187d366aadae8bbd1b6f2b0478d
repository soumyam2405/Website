{"ast":null,"code":"/* eslint-disable import/no-cycle */\nimport { isValid } from \"date-fns\";\nimport { getParentOfType, types } from \"mobx-state-tree\";\nimport { ColorModel } from \"../../../../common/input/color/ColorModel\";\nimport { nullableDate } from \"../../../../common/state/nullableDate\";\nimport { getUniqueId } from \"../../../../common/state/uid\";\nimport { FieldModel } from \"./FieldModel\";\nimport { MessageModel } from \"./MessageModel\";\nexport const EmbedModel = types.model(\"EmbedModel\", {\n  id: types.optional(types.identifierNumber, getUniqueId),\n  title: \"\",\n  description: \"\",\n  url: \"\",\n  color: types.optional(ColorModel, {}),\n  fields: types.array(types.late(() => FieldModel)),\n  author: \"\",\n  authorUrl: \"\",\n  authorIcon: \"\",\n  footer: \"\",\n  footerIcon: \"\",\n  timestamp: types.optional(nullableDate, null),\n  gallery: types.array(types.string),\n  thumbnail: \"\"\n}).views(self => ({\n  get message() {\n    return getParentOfType(self, MessageModel);\n  },\n\n  get length() {\n    return self.title.length + self.description.length + self.fields.reduce((length, field) => length + field.name.length + field.value.length, 0) + self.author.length + self.footer.length;\n  },\n\n  get size() {\n    return Math.max(self.gallery.length, 1);\n  },\n\n  get hasTitle() {\n    return self.title.trim().length > 0;\n  },\n\n  get hasDescription() {\n    return self.description.trim().length > 0;\n  },\n\n  get hasAuthor() {\n    return self.author.trim().length > 0;\n  },\n\n  get hasFooter() {\n    return self.footer.trim().length > 0 || isValid(self.timestamp);\n  },\n\n  get data() {\n    const fields = self.fields.length > 0 ? self.fields.map(field => ({\n      name: field.name || undefined,\n      value: field.value || undefined,\n      inline: field.inline || undefined\n    })) : undefined;\n    const author = this.hasAuthor ? {\n      name: self.author,\n      url: self.authorUrl || undefined,\n      icon_url: self.authorIcon || undefined\n    } : undefined;\n    const footer = self.footer.trim().length > 0 || isValid(self.timestamp) && self.footerIcon ? {\n      text: self.footer || undefined,\n      icon_url: self.footerIcon || undefined\n    } : undefined;\n    const embeds = [{\n      title: self.title || undefined,\n      description: self.description || undefined,\n      url: self.url || undefined,\n      color: self.color.raw,\n      fields,\n      author,\n      footer,\n      timestamp: isValid(self.timestamp) ? self.timestamp.toJSON() : undefined,\n      image: self.gallery.length > 0 ? {\n        url: self.gallery[0]\n      } : undefined,\n      thumbnail: self.thumbnail ? {\n        url: self.thumbnail\n      } : undefined\n    }];\n\n    for (const image of self.gallery.slice(1)) {\n      embeds.push({\n        url: self.url,\n        image: {\n          url: image\n        }\n      });\n    }\n\n    return embeds;\n  },\n\n  get displayName() {\n    /* eslint-disable @typescript-eslint/prefer-nullish-coalescing */\n    return self.author.split(\"\\n\").map(line => line.trim()).find(Boolean) || self.title.split(\"\\n\").map(line => line.trim()).find(Boolean) || self.description.split(\"\\n\").map(line => line.trim()).find(Boolean) || self.fields.map(field => field.displayName).find(Boolean) || self.footer.split(\"\\n\").map(line => line.trim()).find(Boolean) || undefined;\n    /* eslint-enable @typescript-eslint/prefer-nullish-coalescing */\n  }\n\n})).actions(_c = self => ({\n  set(key, value) {\n    self[key] = value;\n  }\n\n})); // eslint-disable-next-line @typescript-eslint/no-empty-interface, @typescript-eslint/consistent-type-definitions\n\n_c2 = EmbedModel;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EmbedModel$types\\r\\n  .model(\\\"EmbedModel\\\", {\\r\\n    id: types.optional(types.identifierNumber, getUniqueId),\\r\\n    title: \\\"\\\",\\r\\n    description: \\\"\\\",\\r\\n    url: \\\"\\\",\\r\\n    color: types.optional(ColorModel, {}),\\r\\n    fields: types.array(types.late(() => FieldModel)),\\r\\n    author: \\\"\\\",\\r\\n    authorUrl: \\\"\\\",\\r\\n    authorIcon: \\\"\\\",\\r\\n    footer: \\\"\\\",\\r\\n    footerIcon: \\\"\\\",\\r\\n    timestamp: types.optional(nullableDate, null),\\r\\n    gallery: types.array(types.string),\\r\\n    thumbnail: \\\"\\\",\\r\\n  })\\r\\n  .views(self => ({\\r\\n    get message(): MessageLike {\\r\\n      return getParentOfType(self, MessageModel)\\r\\n    },\\r\\n\\r\\n    get length() {\\r\\n      return (\\r\\n        self.title.length +\\r\\n        self.description.length +\\r\\n        self.fields.reduce(\\r\\n          (length, field) => length + field.name.length + field.value.length,\\r\\n          0,\\r\\n        ) +\\r\\n        self.author.length +\\r\\n        self.footer.length\\r\\n      )\\r\\n    },\\r\\n\\r\\n    get size() {\\r\\n      return Math.max(self.gallery.length, 1)\\r\\n    },\\r\\n\\r\\n    get hasTitle() {\\r\\n      return self.title.trim().length > 0\\r\\n    },\\r\\n    get hasDescription() {\\r\\n      return self.description.trim().length > 0\\r\\n    },\\r\\n    get hasAuthor() {\\r\\n      return self.author.trim().length > 0\\r\\n    },\\r\\n    get hasFooter() {\\r\\n      return self.footer.trim().length > 0 || isValid(self.timestamp)\\r\\n    },\\r\\n\\r\\n    get data(): readonly EmbedData[] {\\r\\n      const fields: FieldData[] | undefined =\\r\\n        self.fields.length > 0\\r\\n          ? self.fields.map(field => ({\\r\\n              name: field.name || undefined,\\r\\n              value: field.value || undefined,\\r\\n              inline: field.inline || undefined,\\r\\n            }))\\r\\n          : undefined\\r\\n\\r\\n      const author: AuthorData | undefined = this.hasAuthor\\r\\n        ? {\\r\\n            name: self.author,\\r\\n            url: self.authorUrl || undefined,\\r\\n            icon_url: self.authorIcon || undefined,\\r\\n          }\\r\\n        : undefined\\r\\n\\r\\n      const footer: FooterData | undefined =\\r\\n        self.footer.trim().length > 0 ||\\r\\n        (isValid(self.timestamp) && self.footerIcon)\\r\\n          ? {\\r\\n              text: self.footer || undefined,\\r\\n              icon_url: self.footerIcon || undefined,\\r\\n            }\\r\\n          : undefined\\r\\n\\r\\n      const embeds: EmbedData[] = [\\r\\n        {\\r\\n          title: self.title || undefined,\\r\\n          description: self.description || undefined,\\r\\n          url: self.url || undefined,\\r\\n          color: self.color.raw,\\r\\n          fields,\\r\\n          author,\\r\\n          footer,\\r\\n          timestamp: isValid(self.timestamp)\\r\\n            ? self.timestamp.toJSON()\\r\\n            : undefined,\\r\\n          image: self.gallery.length > 0 ? { url: self.gallery[0] } : undefined,\\r\\n          thumbnail: self.thumbnail ? { url: self.thumbnail } : undefined,\\r\\n        },\\r\\n      ]\\r\\n\\r\\n      for (const image of self.gallery.slice(1)) {\\r\\n        embeds.push({\\r\\n          url: self.url,\\r\\n          image: { url: image },\\r\\n        })\\r\\n      }\\r\\n\\r\\n      return embeds\\r\\n    },\\r\\n\\r\\n    get displayName() {\\r\\n      /* eslint-disable @typescript-eslint/prefer-nullish-coalescing */\\r\\n      return (\\r\\n        self.author\\r\\n          .split(\\\"\\\\n\\\")\\r\\n          .map(line => line.trim())\\r\\n          .find(Boolean) ||\\r\\n        self.title\\r\\n          .split(\\\"\\\\n\\\")\\r\\n          .map(line => line.trim())\\r\\n          .find(Boolean) ||\\r\\n        self.description\\r\\n          .split(\\\"\\\\n\\\")\\r\\n          .map(line => line.trim())\\r\\n          .find(Boolean) ||\\r\\n        self.fields.map(field => field.displayName).find(Boolean) ||\\r\\n        self.footer\\r\\n          .split(\\\"\\\\n\\\")\\r\\n          .map(line => line.trim())\\r\\n          .find(Boolean) ||\\r\\n        undefined\\r\\n      )\\r\\n      /* eslint-enable @typescript-eslint/prefer-nullish-coalescing */\\r\\n    },\\r\\n  }))\\r\\n  .actions\");\n$RefreshReg$(_c2, \"EmbedModel\");","map":{"version":3,"sources":["F:/DiscordHookSite/modules/message/state/models/EmbedModel.ts"],"names":["isValid","getParentOfType","types","ColorModel","nullableDate","getUniqueId","FieldModel","MessageModel","EmbedModel","model","id","optional","identifierNumber","title","description","url","color","fields","array","late","author","authorUrl","authorIcon","footer","footerIcon","timestamp","gallery","string","thumbnail","views","self","message","length","reduce","field","name","value","size","Math","max","hasTitle","trim","hasDescription","hasAuthor","hasFooter","data","map","undefined","inline","icon_url","text","embeds","raw","toJSON","image","slice","push","displayName","split","line","find","Boolean","actions","set","key"],"mappings":"AAAA;AAEA,SAASA,OAAT,QAAwB,UAAxB;AACA,SACEC,eADF,EAIEC,KAJF,QAKO,iBALP;AAMA,SAASC,UAAT,QAA2B,2CAA3B;AACA,SAASC,YAAT,QAA6B,uCAA7B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AAKA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAAsBC,YAAtB,QAA0C,gBAA1C;AAEA,OAAO,MAAMC,UAAU,GAAGN,KAAK,CAC5BO,KADuB,CACjB,YADiB,EACH;AACnBC,EAAAA,EAAE,EAAER,KAAK,CAACS,QAAN,CAAeT,KAAK,CAACU,gBAArB,EAAuCP,WAAvC,CADe;AAEnBQ,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,WAAW,EAAE,EAHM;AAInBC,EAAAA,GAAG,EAAE,EAJc;AAKnBC,EAAAA,KAAK,EAAEd,KAAK,CAACS,QAAN,CAAeR,UAAf,EAA2B,EAA3B,CALY;AAMnBc,EAAAA,MAAM,EAAEf,KAAK,CAACgB,KAAN,CAAYhB,KAAK,CAACiB,IAAN,CAAW,MAAMb,UAAjB,CAAZ,CANW;AAOnBc,EAAAA,MAAM,EAAE,EAPW;AAQnBC,EAAAA,SAAS,EAAE,EARQ;AASnBC,EAAAA,UAAU,EAAE,EATO;AAUnBC,EAAAA,MAAM,EAAE,EAVW;AAWnBC,EAAAA,UAAU,EAAE,EAXO;AAYnBC,EAAAA,SAAS,EAAEvB,KAAK,CAACS,QAAN,CAAeP,YAAf,EAA6B,IAA7B,CAZQ;AAanBsB,EAAAA,OAAO,EAAExB,KAAK,CAACgB,KAAN,CAAYhB,KAAK,CAACyB,MAAlB,CAbU;AAcnBC,EAAAA,SAAS,EAAE;AAdQ,CADG,EAiBvBC,KAjBuB,CAiBjBC,IAAI,KAAK;AACd,MAAIC,OAAJ,GAA2B;AACzB,WAAO9B,eAAe,CAAC6B,IAAD,EAAOvB,YAAP,CAAtB;AACD,GAHa;;AAKd,MAAIyB,MAAJ,GAAa;AACX,WACEF,IAAI,CAACjB,KAAL,CAAWmB,MAAX,GACAF,IAAI,CAAChB,WAAL,CAAiBkB,MADjB,GAEAF,IAAI,CAACb,MAAL,CAAYgB,MAAZ,CACE,CAACD,MAAD,EAASE,KAAT,KAAmBF,MAAM,GAAGE,KAAK,CAACC,IAAN,CAAWH,MAApB,GAA6BE,KAAK,CAACE,KAAN,CAAYJ,MAD9D,EAEE,CAFF,CAFA,GAMAF,IAAI,CAACV,MAAL,CAAYY,MANZ,GAOAF,IAAI,CAACP,MAAL,CAAYS,MARd;AAUD,GAhBa;;AAkBd,MAAIK,IAAJ,GAAW;AACT,WAAOC,IAAI,CAACC,GAAL,CAAST,IAAI,CAACJ,OAAL,CAAaM,MAAtB,EAA8B,CAA9B,CAAP;AACD,GApBa;;AAsBd,MAAIQ,QAAJ,GAAe;AACb,WAAOV,IAAI,CAACjB,KAAL,CAAW4B,IAAX,GAAkBT,MAAlB,GAA2B,CAAlC;AACD,GAxBa;;AAyBd,MAAIU,cAAJ,GAAqB;AACnB,WAAOZ,IAAI,CAAChB,WAAL,CAAiB2B,IAAjB,GAAwBT,MAAxB,GAAiC,CAAxC;AACD,GA3Ba;;AA4Bd,MAAIW,SAAJ,GAAgB;AACd,WAAOb,IAAI,CAACV,MAAL,CAAYqB,IAAZ,GAAmBT,MAAnB,GAA4B,CAAnC;AACD,GA9Ba;;AA+Bd,MAAIY,SAAJ,GAAgB;AACd,WAAOd,IAAI,CAACP,MAAL,CAAYkB,IAAZ,GAAmBT,MAAnB,GAA4B,CAA5B,IAAiChC,OAAO,CAAC8B,IAAI,CAACL,SAAN,CAA/C;AACD,GAjCa;;AAmCd,MAAIoB,IAAJ,GAAiC;AAC/B,UAAM5B,MAA+B,GACnCa,IAAI,CAACb,MAAL,CAAYe,MAAZ,GAAqB,CAArB,GACIF,IAAI,CAACb,MAAL,CAAY6B,GAAZ,CAAgBZ,KAAK,KAAK;AACxBC,MAAAA,IAAI,EAAED,KAAK,CAACC,IAAN,IAAcY,SADI;AAExBX,MAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,IAAeW,SAFE;AAGxBC,MAAAA,MAAM,EAAEd,KAAK,CAACc,MAAN,IAAgBD;AAHA,KAAL,CAArB,CADJ,GAMIA,SAPN;AASA,UAAM3B,MAA8B,GAAG,KAAKuB,SAAL,GACnC;AACER,MAAAA,IAAI,EAAEL,IAAI,CAACV,MADb;AAEEL,MAAAA,GAAG,EAAEe,IAAI,CAACT,SAAL,IAAkB0B,SAFzB;AAGEE,MAAAA,QAAQ,EAAEnB,IAAI,CAACR,UAAL,IAAmByB;AAH/B,KADmC,GAMnCA,SANJ;AAQA,UAAMxB,MAA8B,GAClCO,IAAI,CAACP,MAAL,CAAYkB,IAAZ,GAAmBT,MAAnB,GAA4B,CAA5B,IACChC,OAAO,CAAC8B,IAAI,CAACL,SAAN,CAAP,IAA2BK,IAAI,CAACN,UADjC,GAEI;AACE0B,MAAAA,IAAI,EAAEpB,IAAI,CAACP,MAAL,IAAewB,SADvB;AAEEE,MAAAA,QAAQ,EAAEnB,IAAI,CAACN,UAAL,IAAmBuB;AAF/B,KAFJ,GAMIA,SAPN;AASA,UAAMI,MAAmB,GAAG,CAC1B;AACEtC,MAAAA,KAAK,EAAEiB,IAAI,CAACjB,KAAL,IAAckC,SADvB;AAEEjC,MAAAA,WAAW,EAAEgB,IAAI,CAAChB,WAAL,IAAoBiC,SAFnC;AAGEhC,MAAAA,GAAG,EAAEe,IAAI,CAACf,GAAL,IAAYgC,SAHnB;AAIE/B,MAAAA,KAAK,EAAEc,IAAI,CAACd,KAAL,CAAWoC,GAJpB;AAKEnC,MAAAA,MALF;AAMEG,MAAAA,MANF;AAOEG,MAAAA,MAPF;AAQEE,MAAAA,SAAS,EAAEzB,OAAO,CAAC8B,IAAI,CAACL,SAAN,CAAP,GACPK,IAAI,CAACL,SAAL,CAAe4B,MAAf,EADO,GAEPN,SAVN;AAWEO,MAAAA,KAAK,EAAExB,IAAI,CAACJ,OAAL,CAAaM,MAAb,GAAsB,CAAtB,GAA0B;AAAEjB,QAAAA,GAAG,EAAEe,IAAI,CAACJ,OAAL,CAAa,CAAb;AAAP,OAA1B,GAAqDqB,SAX9D;AAYEnB,MAAAA,SAAS,EAAEE,IAAI,CAACF,SAAL,GAAiB;AAAEb,QAAAA,GAAG,EAAEe,IAAI,CAACF;AAAZ,OAAjB,GAA2CmB;AAZxD,KAD0B,CAA5B;;AAiBA,SAAK,MAAMO,KAAX,IAAoBxB,IAAI,CAACJ,OAAL,CAAa6B,KAAb,CAAmB,CAAnB,CAApB,EAA2C;AACzCJ,MAAAA,MAAM,CAACK,IAAP,CAAY;AACVzC,QAAAA,GAAG,EAAEe,IAAI,CAACf,GADA;AAEVuC,QAAAA,KAAK,EAAE;AAAEvC,UAAAA,GAAG,EAAEuC;AAAP;AAFG,OAAZ;AAID;;AAED,WAAOH,MAAP;AACD,GAvFa;;AAyFd,MAAIM,WAAJ,GAAkB;AAChB;AACA,WACE3B,IAAI,CAACV,MAAL,CACGsC,KADH,CACS,IADT,EAEGZ,GAFH,CAEOa,IAAI,IAAIA,IAAI,CAAClB,IAAL,EAFf,EAGGmB,IAHH,CAGQC,OAHR,KAIA/B,IAAI,CAACjB,KAAL,CACG6C,KADH,CACS,IADT,EAEGZ,GAFH,CAEOa,IAAI,IAAIA,IAAI,CAAClB,IAAL,EAFf,EAGGmB,IAHH,CAGQC,OAHR,CAJA,IAQA/B,IAAI,CAAChB,WAAL,CACG4C,KADH,CACS,IADT,EAEGZ,GAFH,CAEOa,IAAI,IAAIA,IAAI,CAAClB,IAAL,EAFf,EAGGmB,IAHH,CAGQC,OAHR,CARA,IAYA/B,IAAI,CAACb,MAAL,CAAY6B,GAAZ,CAAgBZ,KAAK,IAAIA,KAAK,CAACuB,WAA/B,EAA4CG,IAA5C,CAAiDC,OAAjD,CAZA,IAaA/B,IAAI,CAACP,MAAL,CACGmC,KADH,CACS,IADT,EAEGZ,GAFH,CAEOa,IAAI,IAAIA,IAAI,CAAClB,IAAL,EAFf,EAGGmB,IAHH,CAGQC,OAHR,CAbA,IAiBAd,SAlBF;AAoBA;AACD;;AAhHa,CAAL,CAjBa,EAmIvBe,OAnIuB,MAmIfhC,IAAI,KAAK;AAChBiC,EAAAA,GAAG,CACDC,GADC,EAED5B,KAFC,EAGD;AACAN,IAAAA,IAAI,CAACkC,GAAD,CAAJ,GAAY5B,KAAZ;AACD;;AANe,CAAL,CAnIW,CAAnB,C,CA4IP;;MA5Ia5B,U","sourcesContent":["/* eslint-disable import/no-cycle */\r\n\r\nimport { isValid } from \"date-fns\"\r\nimport {\r\n  getParentOfType,\r\n  Instance,\r\n  SnapshotOrInstance,\r\n  types,\r\n} from \"mobx-state-tree\"\r\nimport { ColorModel } from \"../../../../common/input/color/ColorModel\"\r\nimport { nullableDate } from \"../../../../common/state/nullableDate\"\r\nimport { getUniqueId } from \"../../../../common/state/uid\"\r\nimport type { AuthorData } from \"../data/AuthorData\"\r\nimport type { EmbedData } from \"../data/EmbedData\"\r\nimport type { FieldData } from \"../data/FieldData\"\r\nimport type { FooterData } from \"../data/FooterData\"\r\nimport { FieldModel } from \"./FieldModel\"\r\nimport { MessageLike, MessageModel } from \"./MessageModel\"\r\n\r\nexport const EmbedModel = types\r\n  .model(\"EmbedModel\", {\r\n    id: types.optional(types.identifierNumber, getUniqueId),\r\n    title: \"\",\r\n    description: \"\",\r\n    url: \"\",\r\n    color: types.optional(ColorModel, {}),\r\n    fields: types.array(types.late(() => FieldModel)),\r\n    author: \"\",\r\n    authorUrl: \"\",\r\n    authorIcon: \"\",\r\n    footer: \"\",\r\n    footerIcon: \"\",\r\n    timestamp: types.optional(nullableDate, null),\r\n    gallery: types.array(types.string),\r\n    thumbnail: \"\",\r\n  })\r\n  .views(self => ({\r\n    get message(): MessageLike {\r\n      return getParentOfType(self, MessageModel)\r\n    },\r\n\r\n    get length() {\r\n      return (\r\n        self.title.length +\r\n        self.description.length +\r\n        self.fields.reduce(\r\n          (length, field) => length + field.name.length + field.value.length,\r\n          0,\r\n        ) +\r\n        self.author.length +\r\n        self.footer.length\r\n      )\r\n    },\r\n\r\n    get size() {\r\n      return Math.max(self.gallery.length, 1)\r\n    },\r\n\r\n    get hasTitle() {\r\n      return self.title.trim().length > 0\r\n    },\r\n    get hasDescription() {\r\n      return self.description.trim().length > 0\r\n    },\r\n    get hasAuthor() {\r\n      return self.author.trim().length > 0\r\n    },\r\n    get hasFooter() {\r\n      return self.footer.trim().length > 0 || isValid(self.timestamp)\r\n    },\r\n\r\n    get data(): readonly EmbedData[] {\r\n      const fields: FieldData[] | undefined =\r\n        self.fields.length > 0\r\n          ? self.fields.map(field => ({\r\n              name: field.name || undefined,\r\n              value: field.value || undefined,\r\n              inline: field.inline || undefined,\r\n            }))\r\n          : undefined\r\n\r\n      const author: AuthorData | undefined = this.hasAuthor\r\n        ? {\r\n            name: self.author,\r\n            url: self.authorUrl || undefined,\r\n            icon_url: self.authorIcon || undefined,\r\n          }\r\n        : undefined\r\n\r\n      const footer: FooterData | undefined =\r\n        self.footer.trim().length > 0 ||\r\n        (isValid(self.timestamp) && self.footerIcon)\r\n          ? {\r\n              text: self.footer || undefined,\r\n              icon_url: self.footerIcon || undefined,\r\n            }\r\n          : undefined\r\n\r\n      const embeds: EmbedData[] = [\r\n        {\r\n          title: self.title || undefined,\r\n          description: self.description || undefined,\r\n          url: self.url || undefined,\r\n          color: self.color.raw,\r\n          fields,\r\n          author,\r\n          footer,\r\n          timestamp: isValid(self.timestamp)\r\n            ? self.timestamp.toJSON()\r\n            : undefined,\r\n          image: self.gallery.length > 0 ? { url: self.gallery[0] } : undefined,\r\n          thumbnail: self.thumbnail ? { url: self.thumbnail } : undefined,\r\n        },\r\n      ]\r\n\r\n      for (const image of self.gallery.slice(1)) {\r\n        embeds.push({\r\n          url: self.url,\r\n          image: { url: image },\r\n        })\r\n      }\r\n\r\n      return embeds\r\n    },\r\n\r\n    get displayName() {\r\n      /* eslint-disable @typescript-eslint/prefer-nullish-coalescing */\r\n      return (\r\n        self.author\r\n          .split(\"\\n\")\r\n          .map(line => line.trim())\r\n          .find(Boolean) ||\r\n        self.title\r\n          .split(\"\\n\")\r\n          .map(line => line.trim())\r\n          .find(Boolean) ||\r\n        self.description\r\n          .split(\"\\n\")\r\n          .map(line => line.trim())\r\n          .find(Boolean) ||\r\n        self.fields.map(field => field.displayName).find(Boolean) ||\r\n        self.footer\r\n          .split(\"\\n\")\r\n          .map(line => line.trim())\r\n          .find(Boolean) ||\r\n        undefined\r\n      )\r\n      /* eslint-enable @typescript-eslint/prefer-nullish-coalescing */\r\n    },\r\n  }))\r\n  .actions(self => ({\r\n    set<K extends keyof typeof self>(\r\n      key: K,\r\n      value: SnapshotOrInstance<typeof self[K]>,\r\n    ) {\r\n      self[key] = value\r\n    },\r\n  }))\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface, @typescript-eslint/consistent-type-definitions\r\nexport interface EmbedLike extends Instance<typeof EmbedModel> {}\r\n"]},"metadata":{},"sourceType":"module"}