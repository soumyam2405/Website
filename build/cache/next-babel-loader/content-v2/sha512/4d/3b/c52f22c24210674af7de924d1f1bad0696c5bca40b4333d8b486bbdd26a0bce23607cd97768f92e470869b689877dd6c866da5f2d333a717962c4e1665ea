{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { anyScopeRegex, defaultRules } from \"simple-markdown\";\nimport { CodeBlock } from \"../code/CodeBlock\";\nconst CODE_BLOCK_RE = /^```(?:([\\w+.-]+?)\\n)?\\n*([^\\n][\\S\\s]*?)\\n*```/i;\nexport const codeBlock = {\n  order: defaultRules.codeBlock.order,\n  match: anyScopeRegex(CODE_BLOCK_RE),\n  parse: capture => {\n    const [, language = \"\", content] = capture;\n    return {\n      language,\n      content\n    };\n  },\n  react: (node, output, state) => /*#__PURE__*/_jsx(CodeBlock, {\n    language: node.language,\n    content: node.content\n  }, state.key)\n};","map":{"version":3,"sources":["F:/DiscordHookSite/modules/markdown/rules/codeBlock.tsx"],"names":["React","anyScopeRegex","defaultRules","CodeBlock","CODE_BLOCK_RE","codeBlock","order","match","parse","capture","language","content","react","node","output","state","key"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,iBAA5C;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAGA,MAAMC,aAAa,GAAG,iDAAtB;AAEA,OAAO,MAAMC,SAAuB,GAAG;AACrCC,EAAAA,KAAK,EAAEJ,YAAY,CAACG,SAAb,CAAuBC,KADO;AAErCC,EAAAA,KAAK,EAAEN,aAAa,CAACG,aAAD,CAFiB;AAGrCI,EAAAA,KAAK,EAAEC,OAAO,IAAI;AAChB,UAAM,GAAGC,QAAQ,GAAG,EAAd,EAAkBC,OAAlB,IAA6BF,OAAnC;AAEA,WAAO;AACLC,MAAAA,QADK;AAELC,MAAAA;AAFK,KAAP;AAID,GAVoC;AAWrCC,EAAAA,KAAK,EAAE,CAACC,IAAD,EAAOC,MAAP,EAAeC,KAAf,kBACL,KAAC,SAAD;AAEE,IAAA,QAAQ,EAAEF,IAAI,CAACH,QAFjB;AAGE,IAAA,OAAO,EAAEG,IAAI,CAACF;AAHhB,KACOI,KAAK,CAACC,GADb;AAZmC,CAAhC","sourcesContent":["import React from \"react\"\r\nimport { anyScopeRegex, defaultRules } from \"simple-markdown\"\r\nimport { CodeBlock } from \"../code/CodeBlock\"\r\nimport type { MarkdownRule } from \"../parsers/MarkdownRule\"\r\n\r\nconst CODE_BLOCK_RE = /^```(?:([\\w+.-]+?)\\n)?\\n*([^\\n][\\S\\s]*?)\\n*```/i\r\n\r\nexport const codeBlock: MarkdownRule = {\r\n  order: defaultRules.codeBlock.order,\r\n  match: anyScopeRegex(CODE_BLOCK_RE),\r\n  parse: capture => {\r\n    const [, language = \"\", content] = capture\r\n\r\n    return {\r\n      language,\r\n      content,\r\n    }\r\n  },\r\n  react: (node, output, state) => (\r\n    <CodeBlock\r\n      key={state.key}\r\n      language={node.language}\r\n      content={node.content}\r\n    />\r\n  ),\r\n}\r\n"]},"metadata":{},"sourceType":"module"}