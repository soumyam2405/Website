{"ast":null,"code":"var _dec, _class, _descriptor, _temp;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { computed, observable } from \"mobx\";\nimport { THEMES } from \"../theming/constants\";\nimport { DEFAULT_PREFERENCES } from \"./defaultPreferences\";\nexport let PreferenceManager = (_dec = computed.struct, (_class = (_temp = class PreferenceManager {\n  constructor() {\n    _initializerDefineProperty(this, \"settings\", _descriptor, this);\n  }\n\n  load() {\n    var _localStorage$getItem;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const settings = this.settings;\n    const storedSettings = true ? {} : JSON.parse((_localStorage$getItem = localStorage.getItem(\"settings\")) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : \"{}\");\n\n    for (const [key, value] of Object.entries(storedSettings)) {\n      if (!Object.keys(settings).includes(key)) continue;\n      settings[key] = value;\n    }\n  }\n\n  dump() {\n    const json = JSON.stringify(this.settings);\n    localStorage.setItem(\"settings\", json);\n  } // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\n  get theme() {\n    const {\n      color,\n      display,\n      fontSize\n    } = this.settings;\n    return _objectSpread(_objectSpread({}, THEMES[color]), {}, {\n      appearance: {\n        color,\n        display,\n        fontSize\n      }\n    });\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"settings\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return _objectSpread({}, DEFAULT_PREFERENCES);\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"theme\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \"theme\"), _class.prototype)), _class));","map":{"version":3,"sources":["F:/DiscordHookSite/common/settings/PreferenceManager.ts"],"names":["computed","observable","THEMES","DEFAULT_PREFERENCES","PreferenceManager","struct","load","settings","storedSettings","JSON","parse","localStorage","getItem","key","value","Object","entries","keys","includes","dump","json","stringify","setItem","theme","color","display","fontSize","appearance"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,MAArC;AACA,SAASC,MAAT,QAAuB,sBAAvB;AAEA,SAASC,mBAAT,QAAoC,sBAApC;AAGA,WAAaC,iBAAb,WAyBGJ,QAAQ,CAACK,MAzBZ,qBAAO,MAAMD,iBAAN,CAAwB;AAAA;AAAA;AAAA;;AAG7BE,EAAAA,IAAI,GAAG;AAAA;;AACL;AACA,UAAMC,QAAQ,GAAG,KAAKA,QAAtB;AAEA,UAAMC,cAAoC,GACxC,OACI,EADJ,GAEIC,IAAI,CAACC,KAAL,0BAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,yEAA+C,IAA/C,CAHN;;AAKA,SAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeR,cAAf,CAA3B,EAA2D;AACzD,UAAI,CAACO,MAAM,CAACE,IAAP,CAAYV,QAAZ,EAAsBW,QAAtB,CAA+BL,GAA/B,CAAL,EAA0C;AAE1CN,MAAAA,QAAQ,CAACM,GAAD,CAAR,GAAgBC,KAAhB;AACD;AACF;;AAEDK,EAAAA,IAAI,GAAG;AACL,UAAMC,IAAI,GAAGX,IAAI,CAACY,SAAL,CAAe,KAAKd,QAApB,CAAb;AACAI,IAAAA,YAAY,CAACW,OAAb,CAAqB,UAArB,EAAiCF,IAAjC;AACD,GAtB4B,CAwB7B;;;AACA,MAAqBG,KAArB,GAAoC;AAClC,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,OAAT;AAAkBC,MAAAA;AAAlB,QAA+B,KAAKnB,QAA1C;AAEA,2CACKL,MAAM,CAACsB,KAAD,CADX;AAEEG,MAAAA,UAAU,EAAE;AACVH,QAAAA,KADU;AAEVC,QAAAA,OAFU;AAGVC,QAAAA;AAHU;AAFd;AAQD;;AApC4B,CAA/B,kFACGzB,UADH;AAAA;AAAA;AAAA;AAAA;AAAA,6BAC2CE,mBAD3C;AAAA;AAAA","sourcesContent":["import { computed, observable } from \"mobx\"\r\nimport { THEMES } from \"../theming/constants\"\r\nimport type { Theme } from \"../theming/Theme\"\r\nimport { DEFAULT_PREFERENCES } from \"./defaultPreferences\"\r\nimport type { Preferences } from \"./Preferences\"\r\n\r\nexport class PreferenceManager {\r\n  @observable settings: Preferences = { ...DEFAULT_PREFERENCES }\r\n\r\n  load() {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const settings = this.settings as any\r\n\r\n    const storedSettings: Partial<Preferences> =\r\n      typeof window === \"undefined\"\r\n        ? {}\r\n        : JSON.parse(localStorage.getItem(\"settings\") ?? \"{}\")\r\n\r\n    for (const [key, value] of Object.entries(storedSettings)) {\r\n      if (!Object.keys(settings).includes(key)) continue\r\n\r\n      settings[key] = value\r\n    }\r\n  }\r\n\r\n  dump() {\r\n    const json = JSON.stringify(this.settings)\r\n    localStorage.setItem(\"settings\", json)\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/unbound-method\r\n  @computed.struct get theme(): Theme {\r\n    const { color, display, fontSize } = this.settings\r\n\r\n    return {\r\n      ...THEMES[color],\r\n      appearance: {\r\n        color,\r\n        display,\r\n        fontSize,\r\n      },\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}