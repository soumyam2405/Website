{"ast":null,"code":"import _defineProperty from \"F:/DiscordHookSite/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { defaultRules } from \"simple-markdown\";\nimport { convertEmojiToNames } from \"../emoji/convertEmojiToNames\";\nexport const text = _objectSpread(_objectSpread({}, defaultRules.text), {}, {\n  parse: (capture, parse, state) => {\n    const [content] = capture;\n    const {\n      nested\n    } = state;\n\n    if (nested) {\n      return {\n        content\n      };\n    }\n\n    return parse(convertEmojiToNames(content), _objectSpread(_objectSpread({}, state), {}, {\n      nested: true\n    }));\n  }\n});","map":{"version":3,"sources":["F:/DiscordHookSite/modules/markdown/rules/text.ts"],"names":["defaultRules","convertEmojiToNames","text","parse","capture","state","content","nested"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,iBAA7B;AACA,SAASC,mBAAT,QAAoC,8BAApC;AAGA,OAAO,MAAMC,IAAkB,mCAC1BF,YAAY,CAACE,IADa;AAE7BC,EAAAA,KAAK,EAAE,CAACC,OAAD,EAAUD,KAAV,EAAiBE,KAAjB,KAA2B;AAChC,UAAM,CAACC,OAAD,IAAYF,OAAlB;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAaF,KAAnB;;AAEA,QAAIE,MAAJ,EAAY;AACV,aAAO;AACLD,QAAAA;AADK,OAAP;AAGD;;AAED,WAAOH,KAAK,CAACF,mBAAmB,CAACK,OAAD,CAApB,kCACPD,KADO;AAEVE,MAAAA,MAAM,EAAE;AAFE,OAAZ;AAID;AAhB4B,EAAxB","sourcesContent":["import { defaultRules } from \"simple-markdown\"\r\nimport { convertEmojiToNames } from \"../emoji/convertEmojiToNames\"\r\nimport type { MarkdownRule } from \"../parsers/MarkdownRule\"\r\n\r\nexport const text: MarkdownRule = {\r\n  ...defaultRules.text,\r\n  parse: (capture, parse, state) => {\r\n    const [content] = capture\r\n    const { nested } = state\r\n\r\n    if (nested) {\r\n      return {\r\n        content,\r\n      }\r\n    }\r\n\r\n    return parse(convertEmojiToNames(content), {\r\n      ...state,\r\n      nested: true,\r\n    })\r\n  },\r\n}\r\n"]},"metadata":{},"sourceType":"module"}