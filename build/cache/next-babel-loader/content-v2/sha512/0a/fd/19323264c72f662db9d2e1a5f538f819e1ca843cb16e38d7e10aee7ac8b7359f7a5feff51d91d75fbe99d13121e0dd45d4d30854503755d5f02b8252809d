{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\";\nimport { useRequiredContext } from \"../state/useRequiredContext\";\nimport { TooltipManagerContext } from \"./TooltipManagerContext\";\nexport function TooltipWrapper(props) {\n  _s();\n\n  const {\n    label,\n    children\n  } = props;\n  const manager = useRequiredContext(TooltipManagerContext);\n  const anchorRef = useRef(null);\n  useEffect(() => {\n    const {\n      current: anchor\n    } = anchorRef;\n    if (!anchor) return;\n    const dismiss = manager.add({\n      anchor,\n      content: label\n    });\n    return () => {\n      dismiss();\n    };\n  }, [label, manager]);\n  return children(anchorRef);\n}\n\n_s(TooltipWrapper, \"yt5aRKAbJ3wLNno/nuKrgvGwebE=\", false, function () {\n  return [useRequiredContext];\n});\n\n_c = TooltipWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"TooltipWrapper\");","map":{"version":3,"sources":["F:/DiscordHookSite/common/tooltip/TooltipWrapper.tsx"],"names":["useEffect","useRef","useRequiredContext","TooltipManagerContext","TooltipWrapper","props","label","children","manager","anchorRef","current","anchor","dismiss","add","content"],"mappings":";;AAAA,SAA6CA,SAA7C,EAAwDC,MAAxD,QAAsE,OAAtE;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AAOA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAAoD;AAAA;;AACzD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBF,KAA5B;AAEA,QAAMG,OAAO,GAAGN,kBAAkB,CAACC,qBAAD,CAAlC;AAEA,QAAMM,SAAS,GAAGR,MAAM,CAAc,IAAd,CAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEU,MAAAA,OAAO,EAAEC;AAAX,QAAsBF,SAA5B;AACA,QAAI,CAACE,MAAL,EAAa;AAEb,UAAMC,OAAO,GAAGJ,OAAO,CAACK,GAAR,CAAY;AAC1BF,MAAAA,MAD0B;AAE1BG,MAAAA,OAAO,EAAER;AAFiB,KAAZ,CAAhB;AAKA,WAAO,MAAM;AACXM,MAAAA,OAAO;AACR,KAFD;AAGD,GAZQ,EAYN,CAACN,KAAD,EAAQE,OAAR,CAZM,CAAT;AAcA,SAAOD,QAAQ,CAACE,SAAD,CAAf;AACD;;GAtBeL,c;UAGEF,kB;;;KAHFE,c","sourcesContent":["import { ReactElement, ReactNode, RefObject, useEffect, useRef } from \"react\"\r\nimport { useRequiredContext } from \"../state/useRequiredContext\"\r\nimport { TooltipManagerContext } from \"./TooltipManagerContext\"\r\n\r\nexport type TooltipWrapperProps = {\r\n  label: ReactNode\r\n  children: (ref: RefObject<never>) => ReactNode\r\n}\r\n\r\nexport function TooltipWrapper(props: TooltipWrapperProps) {\r\n  const { label, children } = props\r\n\r\n  const manager = useRequiredContext(TooltipManagerContext)\r\n\r\n  const anchorRef = useRef<HTMLElement>(null)\r\n\r\n  useEffect(() => {\r\n    const { current: anchor } = anchorRef\r\n    if (!anchor) return\r\n\r\n    const dismiss = manager.add({\r\n      anchor,\r\n      content: label,\r\n    })\r\n\r\n    return () => {\r\n      dismiss()\r\n    }\r\n  }, [label, manager])\r\n\r\n  return children(anchorRef as RefObject<never>) as ReactElement\r\n}\r\n"]},"metadata":{},"sourceType":"module"}