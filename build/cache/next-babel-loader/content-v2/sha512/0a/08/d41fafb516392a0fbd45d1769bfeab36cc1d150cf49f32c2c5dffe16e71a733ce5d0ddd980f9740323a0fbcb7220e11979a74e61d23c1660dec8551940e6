{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\DiscordHookSite\\\\common\\\\input\\\\checkable\\\\Radio.tsx\",\n    _s = $RefreshSig$();\n\nimport { cover, size } from \"polished\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { useRequiredContext } from \"../../state/useRequiredContext\";\nimport { CheckableButton } from \"./layout/CheckableButton\";\nimport { CheckableContainer } from \"./layout/CheckableContainer\";\nimport { CheckableInput } from \"./layout/CheckableInput\";\nimport { CheckableLabel } from \"./layout/CheckableLabel\";\nimport { Positioner } from \"./layout/Positioner\";\nimport { RadioContext } from \"./RadioContext\";\nconst Button = styled(CheckableButton).withConfig({\n  displayName: \"Radio__Button\",\n  componentId: \"sc-1aqn01m-0\"\n})([\"border-radius:50%;&::after{\", \";\", \";content:\\\"\\\";display:block;background:currentColor;border-radius:50%;opacity:0;transition:150ms;transition-property:opacity;}input:checked + &::after{opacity:1;}\"], cover(2), size(8));\n_c = Button;\nexport function Radio(props) {\n  _s();\n\n  const {\n    id: givenId,\n    label,\n    value,\n    disabled\n  } = props;\n  const group = useRequiredContext(RadioContext);\n  const id = givenId !== null && givenId !== void 0 ? givenId : `${group.id}_${value}`;\n  return /*#__PURE__*/_jsxDEV(CheckableContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Positioner, {\n      children: [/*#__PURE__*/_jsxDEV(CheckableInput, {\n        id: id,\n        type: \"radio\",\n        tabIndex: group.selected === value ? 0 : -1,\n        name: group.id,\n        value: value,\n        disabled: disabled,\n        checked: group.selected === value,\n        onChange: group.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CheckableLabel, {\n      htmlFor: id,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Radio, \"cZGu6uaI6PvQEwvhInzSHCpk+8k=\", false, function () {\n  return [useRequiredContext];\n});\n\n_c2 = Radio;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Radio\");","map":{"version":3,"sources":["F:/DiscordHookSite/common/input/checkable/Radio.tsx"],"names":["cover","size","React","styled","useRequiredContext","CheckableButton","CheckableContainer","CheckableInput","CheckableLabel","Positioner","RadioContext","Button","Radio","props","id","givenId","label","value","disabled","group","selected","handleChange"],"mappings":";;;;;AAAA,SAASA,KAAT,EAAgBC,IAAhB,QAA4B,UAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,kBAAT,QAAmC,gCAAnC;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,MAAMC,MAAM,GAAGR,MAAM,CAACE,eAAD,CAAT;AAAA;AAAA;AAAA,+MAINL,KAAK,CAAC,CAAD,CAJC,EAKNC,IAAI,CAAC,CAAD,CALE,CAAZ;KAAMU,M;AA+BN,OAAO,SAASC,KAAT,CAAeC,KAAf,EAAkC;AAAA;;AACvC,QAAM;AAAEC,IAAAA,EAAE,EAAEC,OAAN;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA,KAAtB;AAA6BC,IAAAA;AAA7B,MAA0CL,KAAhD;AAEA,QAAMM,KAAK,GAAGf,kBAAkB,CAACM,YAAD,CAAhC;AAEA,QAAMI,EAAE,GAAGC,OAAH,aAAGA,OAAH,cAAGA,OAAH,GAAe,GAAEI,KAAK,CAACL,EAAG,IAAGG,KAAM,EAA3C;AAEA,sBACE,QAAC,kBAAD;AAAA,4BACE,QAAC,UAAD;AAAA,8BACE,QAAC,cAAD;AACE,QAAA,EAAE,EAAEH,EADN;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,QAAQ,EAAEK,KAAK,CAACC,QAAN,KAAmBH,KAAnB,GAA2B,CAA3B,GAA+B,CAAC,CAH5C;AAIE,QAAA,IAAI,EAAEE,KAAK,CAACL,EAJd;AAKE,QAAA,KAAK,EAAEG,KALT;AAME,QAAA,QAAQ,EAAEC,QANZ;AAOE,QAAA,OAAO,EAAEC,KAAK,CAACC,QAAN,KAAmBH,KAP9B;AAQE,QAAA,QAAQ,EAAEE,KAAK,CAACE;AARlB;AAAA;AAAA;AAAA;AAAA,cADF,eAWE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAcE,QAAC,cAAD;AAAgB,MAAA,OAAO,EAAEP,EAAzB;AAAA,gBAA8BE;AAA9B;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAzBeJ,K;UAGAR,kB;;;MAHAQ,K","sourcesContent":["import { cover, size } from \"polished\"\r\nimport React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { useRequiredContext } from \"../../state/useRequiredContext\"\r\nimport { CheckableButton } from \"./layout/CheckableButton\"\r\nimport { CheckableContainer } from \"./layout/CheckableContainer\"\r\nimport { CheckableInput } from \"./layout/CheckableInput\"\r\nimport { CheckableLabel } from \"./layout/CheckableLabel\"\r\nimport { Positioner } from \"./layout/Positioner\"\r\nimport { RadioContext } from \"./RadioContext\"\r\n\r\nconst Button = styled(CheckableButton)`\r\n  border-radius: 50%;\r\n\r\n  &::after {\r\n    ${cover(2)};\r\n    ${size(8)};\r\n\r\n    content: \"\";\r\n    display: block;\r\n\r\n    background: currentColor;\r\n    border-radius: 50%;\r\n\r\n    opacity: 0;\r\n\r\n    transition: 150ms;\r\n    transition-property: opacity;\r\n  }\r\n\r\n  input:checked + &::after {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nexport type RadioProps = {\r\n  id?: string\r\n  label: string\r\n  value: string\r\n  disabled?: boolean\r\n}\r\n\r\nexport function Radio(props: RadioProps) {\r\n  const { id: givenId, label, value, disabled } = props\r\n\r\n  const group = useRequiredContext(RadioContext)\r\n\r\n  const id = givenId ?? `${group.id}_${value}`\r\n\r\n  return (\r\n    <CheckableContainer>\r\n      <Positioner>\r\n        <CheckableInput\r\n          id={id}\r\n          type=\"radio\"\r\n          tabIndex={group.selected === value ? 0 : -1}\r\n          name={group.id}\r\n          value={value}\r\n          disabled={disabled}\r\n          checked={group.selected === value}\r\n          onChange={group.handleChange}\r\n        />\r\n        <Button />\r\n      </Positioner>\r\n      <CheckableLabel htmlFor={id}>{label}</CheckableLabel>\r\n    </CheckableContainer>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}