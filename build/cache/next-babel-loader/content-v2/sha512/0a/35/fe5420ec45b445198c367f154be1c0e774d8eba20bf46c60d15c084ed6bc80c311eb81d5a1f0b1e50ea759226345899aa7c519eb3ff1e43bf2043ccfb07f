{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\DiscordHookSite\\\\modules\\\\markdown\\\\code\\\\CodeBlock.tsx\",\n    _s = $RefreshSig$();\n\nimport hljs from \"highlight.js/lib/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { CodeBlockContainer } from \"../styles/CodeBlockContainer\";\nimport { getLanguageFromAlias } from \"./getLanguageFromAlias\";\nimport { highlightCode } from \"./highlightCode\";\nexport function CodeBlock(props) {\n  _s();\n\n  const {\n    content,\n    language = \"\"\n  } = props;\n  const {\n    0: html,\n    1: setHtml\n  } = useState(\"\");\n  useEffect(() => {\n    highlightCode(language, content).then(html => setHtml(html !== null && html !== void 0 ? html : \"\")).catch(() => setHtml(\"\"));\n  }, [content, language]);\n\n  if (false) {\n    var _getLanguageFromAlias, _getLanguageFromAlias2;\n\n    const safeLanguage = (_getLanguageFromAlias = (_getLanguageFromAlias2 = getLanguageFromAlias(language)) === null || _getLanguageFromAlias2 === void 0 ? void 0 : _getLanguageFromAlias2.name) !== null && _getLanguageFromAlias !== void 0 ? _getLanguageFromAlias : \"plaintext\";\n    return /*#__PURE__*/_jsxDEV(CodeBlockContainer, {\n      dangerouslySetInnerHTML: {\n        __html: hljs.highlight(safeLanguage, content).value\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (!html) {\n    return /*#__PURE__*/_jsxDEV(CodeBlockContainer, {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CodeBlockContainer, {\n    dangerouslySetInnerHTML: {\n      __html: html\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CodeBlock, \"TgMqydxNsibpjO+BTohp/Jjrufo=\");\n\n_c = CodeBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeBlock\");","map":{"version":3,"sources":["F:/DiscordHookSite/modules/markdown/code/CodeBlock.tsx"],"names":["hljs","React","useEffect","useState","CodeBlockContainer","getLanguageFromAlias","highlightCode","CodeBlock","props","content","language","html","setHtml","then","catch","safeLanguage","name","__html","highlight","value"],"mappings":";;;;;AAAA,OAAOA,IAAP,MAAiB,uBAAjB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAOA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0C;AAAA;;AAC/C,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,QAAQ,GAAG;AAAtB,MAA6BF,KAAnC;AAEA,QAAM;AAAA,OAACG,IAAD;AAAA,OAAOC;AAAP,MAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,aAAa,CAACI,QAAD,EAAWD,OAAX,CAAb,CACGI,IADH,CACQF,IAAI,IAAIC,OAAO,CAACD,IAAD,aAACA,IAAD,cAACA,IAAD,GAAS,EAAT,CADvB,EAEGG,KAFH,CAES,MAAMF,OAAO,CAAC,EAAD,CAFtB;AAGD,GAJQ,EAIN,CAACH,OAAD,EAAUC,QAAV,CAJM,CAAT;;AAMA,aAAmC;AAAA;;AACjC,UAAMK,YAAY,sDAAGV,oBAAoB,CAACK,QAAD,CAAvB,2DAAG,uBAAgCM,IAAnC,yEAA2C,WAA7D;AAEA,wBACE,QAAC,kBAAD;AACE,MAAA,uBAAuB,EAAE;AACvBC,QAAAA,MAAM,EAAEjB,IAAI,CAACkB,SAAL,CAAeH,YAAf,EAA6BN,OAA7B,EAAsCU;AADvB;AAD3B;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAED,MAAI,CAACR,IAAL,EAAW;AACT,wBAAO,QAAC,kBAAD;AAAA,gBAAqBF;AAArB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE,QAAC,kBAAD;AACE,IAAA,uBAAuB,EAAE;AACvBQ,MAAAA,MAAM,EAAEN;AADe;AAD3B;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAjCeJ,S;;KAAAA,S","sourcesContent":["import hljs from \"highlight.js/lib/core\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { CodeBlockContainer } from \"../styles/CodeBlockContainer\"\r\nimport { getLanguageFromAlias } from \"./getLanguageFromAlias\"\r\nimport { highlightCode } from \"./highlightCode\"\r\n\r\nexport type CodeBlockProps = {\r\n  content: string\r\n  language?: string\r\n}\r\n\r\nexport function CodeBlock(props: CodeBlockProps) {\r\n  const { content, language = \"\" } = props\r\n\r\n  const [html, setHtml] = useState(\"\")\r\n  useEffect(() => {\r\n    highlightCode(language, content)\r\n      .then(html => setHtml(html ?? \"\"))\r\n      .catch(() => setHtml(\"\"))\r\n  }, [content, language])\r\n\r\n  if (typeof window === \"undefined\") {\r\n    const safeLanguage = getLanguageFromAlias(language)?.name ?? \"plaintext\"\r\n\r\n    return (\r\n      <CodeBlockContainer\r\n        dangerouslySetInnerHTML={{\r\n          __html: hljs.highlight(safeLanguage, content).value,\r\n        }}\r\n      />\r\n    )\r\n  }\r\n\r\n  if (!html) {\r\n    return <CodeBlockContainer>{content}</CodeBlockContainer>\r\n  }\r\n\r\n  return (\r\n    <CodeBlockContainer\r\n      dangerouslySetInnerHTML={{\r\n        __html: html,\r\n      }}\r\n    />\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}