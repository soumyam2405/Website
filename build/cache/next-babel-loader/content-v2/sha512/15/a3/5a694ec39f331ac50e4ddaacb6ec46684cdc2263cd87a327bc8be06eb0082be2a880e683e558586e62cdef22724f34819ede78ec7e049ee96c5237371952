{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\DiscordHookSite\\\\common\\\\settings\\\\PreferencesModal.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useObserver } from \"mobx-react-lite\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { remove } from \"../../icons/remove\";\nimport { bindToInput } from \"../input/bindToInput\";\nimport { PrimaryButton } from \"../input/button/PrimaryButton\";\nimport { Checkbox } from \"../input/checkable/Checkbox\";\nimport { Radio } from \"../input/checkable/Radio\";\nimport { RadioGroup } from \"../input/checkable/RadioGroup\";\nimport { Slider } from \"../input/slider/Slider\";\nimport { Stack } from \"../layout/Stack\";\nimport { ModalAction } from \"../modal/layout/ModalAction\";\nimport { ModalBody } from \"../modal/layout/ModalBody\";\nimport { ModalContainer } from \"../modal/layout/ModalContainer\";\nimport { ModalFooter } from \"../modal/layout/ModalFooter\";\nimport { ModalHeader } from \"../modal/layout/ModalHeader\";\nimport { ModalTitle } from \"../modal/layout/ModalTitle\";\nimport { ModalContext } from \"../modal/ModalContext\";\nimport { useRequiredContext } from \"../state/useRequiredContext\";\nimport { FONT_SIZES } from \"../theming/constants\";\nimport { PreferenceManagerContext } from \"./PreferenceManagerContext\";\nconst PreferenceSection = styled.h5.withConfig({\n  displayName: \"PreferencesModal__PreferenceSection\",\n  componentId: \"sc-1l2xq6-0\"\n})([\"margin:8px 0 4px;color:\", \";font-weight:600;font-size:14px;\"], ({\n  theme\n}) => theme.header.primary);\nexport function PreferencesModal() {\n  const modal = useRequiredContext(ModalContext);\n  const settingsManager = useRequiredContext(PreferenceManagerContext);\n  return useObserver(() => /*#__PURE__*/_jsxDEV(ModalContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n      children: [/*#__PURE__*/_jsxDEV(ModalTitle, {\n        children: \"Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalAction, {\n        icon: remove,\n        label: \"Close\",\n        onClick: () => modal.dismiss()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        gap: 8,\n        children: [/*#__PURE__*/_jsxDEV(PreferenceSection, {\n          children: \"Appearance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RadioGroup, _objectSpread(_objectSpread({\n          id: \"settings_color\",\n          label: \"Color Theme\"\n        }, bindToInput(settingsManager.settings, \"color\")), {}, {\n          children: [/*#__PURE__*/_jsxDEV(Radio, {\n            label: \"Dark\",\n            value: \"dark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Radio, {\n            label: \"Light\",\n            value: \"light\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)]\n        }), void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RadioGroup, _objectSpread(_objectSpread({\n          id: \"settings_display\",\n          label: \"Display Mode\"\n        }, bindToInput(settingsManager.settings, \"display\")), {}, {\n          children: [/*#__PURE__*/_jsxDEV(Radio, {\n            label: \"Cozy\",\n            value: \"cozy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Radio, {\n            label: \"Compact\",\n            value: \"compact\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }), void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Slider, {\n          id: \"settings_fontSize\",\n          label: \"Font Size\",\n          min: 0,\n          max: 6,\n          markers: FONT_SIZES.map((size, index) => ({\n            value: index,\n            label: String(size)\n          })),\n          getValueName: value => `${FONT_SIZES[value]} pixels`,\n          value: FONT_SIZES.indexOf(settingsManager.settings.fontSize),\n          onChange: index => {\n            settingsManager.settings.fontSize = FONT_SIZES[index];\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PreferenceSection, {\n          children: \"Editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Checkbox, _objectSpread({\n          id: \"settings_confirmExit\",\n          label: \"Confirm on Exit\"\n        }, bindToInput(settingsManager.settings, \"confirmExit\")), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Checkbox, _objectSpread({\n          id: \"settings_expandSections\",\n          label: \"Expand Sections by Default\"\n        }, bindToInput(settingsManager.settings, \"expandSections\")), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n      children: /*#__PURE__*/_jsxDEV(PrimaryButton, {\n        onClick: () => modal.dismiss(),\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this));\n}","map":{"version":3,"sources":["F:/DiscordHookSite/common/settings/PreferencesModal.tsx"],"names":["useObserver","React","styled","remove","bindToInput","PrimaryButton","Checkbox","Radio","RadioGroup","Slider","Stack","ModalAction","ModalBody","ModalContainer","ModalFooter","ModalHeader","ModalTitle","ModalContext","useRequiredContext","FONT_SIZES","PreferenceManagerContext","PreferenceSection","h5","theme","header","primary","PreferencesModal","modal","settingsManager","dismiss","settings","map","size","index","value","label","String","indexOf","fontSize"],"mappings":"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","sourcesContent":["import { useObserver } from \"mobx-react-lite\"\r\nimport React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { remove } from \"../../icons/remove\"\r\nimport { bindToInput } from \"../input/bindToInput\"\r\nimport { PrimaryButton } from \"../input/button/PrimaryButton\"\r\nimport { Checkbox } from \"../input/checkable/Checkbox\"\r\nimport { Radio } from \"../input/checkable/Radio\"\r\nimport { RadioGroup } from \"../input/checkable/RadioGroup\"\r\nimport { Slider } from \"../input/slider/Slider\"\r\nimport { Stack } from \"../layout/Stack\"\r\nimport { ModalAction } from \"../modal/layout/ModalAction\"\r\nimport { ModalBody } from \"../modal/layout/ModalBody\"\r\nimport { ModalContainer } from \"../modal/layout/ModalContainer\"\r\nimport { ModalFooter } from \"../modal/layout/ModalFooter\"\r\nimport { ModalHeader } from \"../modal/layout/ModalHeader\"\r\nimport { ModalTitle } from \"../modal/layout/ModalTitle\"\r\nimport { ModalContext } from \"../modal/ModalContext\"\r\nimport { useRequiredContext } from \"../state/useRequiredContext\"\r\nimport { FONT_SIZES } from \"../theming/constants\"\r\nimport { PreferenceManagerContext } from \"./PreferenceManagerContext\"\r\n\r\nconst PreferenceSection = styled.h5`\r\n  margin: 8px 0 4px;\r\n\r\n  color: ${({ theme }) => theme.header.primary};\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n`\r\n\r\nexport function PreferencesModal() {\r\n  const modal = useRequiredContext(ModalContext)\r\n\r\n  const settingsManager = useRequiredContext(PreferenceManagerContext)\r\n\r\n  return useObserver(() => (\r\n    <ModalContainer>\r\n      <ModalHeader>\r\n        <ModalTitle>Settings</ModalTitle>\r\n        <ModalAction\r\n          icon={remove}\r\n          label=\"Close\"\r\n          onClick={() => modal.dismiss()}\r\n        />\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <Stack gap={8}>\r\n          <PreferenceSection>Appearance</PreferenceSection>\r\n          <RadioGroup\r\n            id=\"settings_color\"\r\n            label=\"Color Theme\"\r\n            {...bindToInput(settingsManager.settings, \"color\")}\r\n          >\r\n            <Radio label=\"Dark\" value=\"dark\" />\r\n            <Radio label=\"Light\" value=\"light\" />\r\n          </RadioGroup>\r\n          <RadioGroup\r\n            id=\"settings_display\"\r\n            label=\"Display Mode\"\r\n            {...bindToInput(settingsManager.settings, \"display\")}\r\n          >\r\n            <Radio label=\"Cozy\" value=\"cozy\" />\r\n            <Radio label=\"Compact\" value=\"compact\" />\r\n          </RadioGroup>\r\n          <Slider\r\n            id=\"settings_fontSize\"\r\n            label=\"Font Size\"\r\n            min={0}\r\n            max={6}\r\n            markers={FONT_SIZES.map((size, index) => ({\r\n              value: index,\r\n              label: String(size),\r\n            }))}\r\n            getValueName={value => `${FONT_SIZES[value]} pixels`}\r\n            value={FONT_SIZES.indexOf(settingsManager.settings.fontSize)}\r\n            onChange={index => {\r\n              settingsManager.settings.fontSize = FONT_SIZES[index]\r\n            }}\r\n          />\r\n          <PreferenceSection>Editor</PreferenceSection>\r\n          <Checkbox\r\n            id=\"settings_confirmExit\"\r\n            label=\"Confirm on Exit\"\r\n            {...bindToInput(settingsManager.settings, \"confirmExit\")}\r\n          />\r\n          <Checkbox\r\n            id=\"settings_expandSections\"\r\n            label=\"Expand Sections by Default\"\r\n            {...bindToInput(settingsManager.settings, \"expandSections\")}\r\n          />\r\n        </Stack>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <PrimaryButton onClick={() => modal.dismiss()}>Close</PrimaryButton>\r\n      </ModalFooter>\r\n    </ModalContainer>\r\n  ))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}