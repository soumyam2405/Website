{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\DiscordHookSite\\\\modules\\\\message\\\\preview\\\\Clock.tsx\",\n    _s = $RefreshSig$();\n\nimport { isValid } from \"date-fns\";\nimport { rem } from \"polished\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport styled, { css, useTheme } from \"styled-components\";\nimport { formatTimestamp } from \"./formatTimestamp\";\nconst Display = styled.span.withConfig({\n  displayName: \"Clock__Display\",\n  componentId: \"sc-1idsap7-0\"\n})([\"display:inline-block;height:\", \";cursor:default;color:\", \";\", \";\", \";\"], rem(20), ({\n  theme\n}) => theme.text.muted, ({\n  theme\n}) => theme.appearance.display === \"cozy\" && css([\"margin-left:\", \";font-size:\", \";font-weight:500;line-height:\", \";vertical-align:baseline;\"], rem(4), rem(12), rem(22)), ({\n  theme\n}) => theme.appearance.display === \"compact\" && css([\"width:\", \";margin-right:\", \";font-size:\", \";line-height:\", \";text-align:right;text-indent:0;\"], rem(48), rem(8), rem(11), rem(22)));\n_c = Display;\nexport function Clock(props) {\n  _s();\n\n  let {\n    timestamp\n  } = props;\n  if (timestamp && !isValid(timestamp)) timestamp = undefined;\n  const theme = useTheme();\n  const format = useCallback((timestamp = new Date()) => {\n    if (theme.appearance.display === \"compact\") {\n      return timestamp.toLocaleString(\"en-US\", {\n        hour: \"numeric\",\n        minute: \"numeric\",\n        hour12: true\n      });\n    }\n\n    return formatTimestamp(timestamp);\n  }, [theme.appearance.display]);\n  const {\n    0: displayedTime,\n    1: setDisplayedTime\n  } = useState(() => format(timestamp));\n  useEffect(() => {\n    if (!timestamp) {\n      const interval = setInterval(() => setDisplayedTime(format()), 1000);\n      return () => clearInterval(interval);\n    }\n\n    setDisplayedTime(format(timestamp));\n  }, [format, timestamp]);\n  return /*#__PURE__*/_jsxDEV(Display, {\n    children: displayedTime\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Clock, \"YQg2WIgs6AGRktjZ/lLiZnjDfFk=\", false, function () {\n  return [useTheme];\n});\n\n_c2 = Clock;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Display\");\n$RefreshReg$(_c2, \"Clock\");","map":{"version":3,"sources":["F:/DiscordHookSite/modules/message/preview/Clock.tsx"],"names":["isValid","rem","React","useCallback","useEffect","useState","styled","css","useTheme","formatTimestamp","Display","span","theme","text","muted","appearance","display","Clock","props","timestamp","undefined","format","Date","toLocaleString","hour","minute","hour12","displayedTime","setDisplayedTime","interval","setInterval","clearInterval"],"mappings":";;;;;AAAA,SAASA,OAAT,QAAwB,UAAxB;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,OAAOC,MAAP,IAAiBC,GAAjB,EAAsBC,QAAtB,QAAsC,mBAAtC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,MAAMC,OAAO,GAAGJ,MAAM,CAACK,IAAV;AAAA;AAAA;AAAA,8EAEDV,GAAG,CAAC,EAAD,CAFF,EAKF,CAAC;AAAEW,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,IAAN,CAAWC,KALxB,EAOT,CAAC;AAAEF,EAAAA;AAAF,CAAD,KACAA,KAAK,CAACG,UAAN,CAAiBC,OAAjB,KAA6B,MAA7B,IACAT,GADA,gGAEiBN,GAAG,CAAC,CAAD,CAFpB,EAIeA,GAAG,CAAC,EAAD,CAJlB,EAMiBA,GAAG,CAAC,EAAD,CANpB,CARS,EAkBT,CAAC;AAAEW,EAAAA;AAAF,CAAD,KACAA,KAAK,CAACG,UAAN,CAAiBC,OAAjB,KAA6B,SAA7B,IACAT,GADA,mGAEWN,GAAG,CAAC,EAAD,CAFd,EAGkBA,GAAG,CAAC,CAAD,CAHrB,EAKeA,GAAG,CAAC,EAAD,CALlB,EAMiBA,GAAG,CAAC,EAAD,CANpB,CAnBS,CAAb;KAAMS,O;AAmCN,OAAO,SAASO,KAAT,CAAeC,KAAf,EAAkC;AAAA;;AACvC,MAAI;AAAEC,IAAAA;AAAF,MAAgBD,KAApB;AACA,MAAIC,SAAS,IAAI,CAACnB,OAAO,CAACmB,SAAD,CAAzB,EAAsCA,SAAS,GAAGC,SAAZ;AAEtC,QAAMR,KAAK,GAAGJ,QAAQ,EAAtB;AAEA,QAAMa,MAAM,GAAGlB,WAAW,CACxB,CAACgB,SAAe,GAAG,IAAIG,IAAJ,EAAnB,KAAkC;AAChC,QAAIV,KAAK,CAACG,UAAN,CAAiBC,OAAjB,KAA6B,SAAjC,EAA4C;AAC1C,aAAOG,SAAS,CAACI,cAAV,CAAyB,OAAzB,EAAkC;AACvCC,QAAAA,IAAI,EAAE,SADiC;AAEvCC,QAAAA,MAAM,EAAE,SAF+B;AAGvCC,QAAAA,MAAM,EAAE;AAH+B,OAAlC,CAAP;AAKD;;AAED,WAAOjB,eAAe,CAACU,SAAD,CAAtB;AACD,GAXuB,EAYxB,CAACP,KAAK,CAACG,UAAN,CAAiBC,OAAlB,CAZwB,CAA1B;AAeA,QAAM;AAAA,OAACW,aAAD;AAAA,OAAgBC;AAAhB,MAAoCvB,QAAQ,CAAC,MAAMgB,MAAM,CAACF,SAAD,CAAb,CAAlD;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACe,SAAL,EAAgB;AACd,YAAMU,QAAQ,GAAGC,WAAW,CAAC,MAAMF,gBAAgB,CAACP,MAAM,EAAP,CAAvB,EAAmC,IAAnC,CAA5B;AACA,aAAO,MAAMU,aAAa,CAACF,QAAD,CAA1B;AACD;;AAEDD,IAAAA,gBAAgB,CAACP,MAAM,CAACF,SAAD,CAAP,CAAhB;AACD,GAPQ,EAON,CAACE,MAAD,EAASF,SAAT,CAPM,CAAT;AASA,sBAAO,QAAC,OAAD;AAAA,cAAUQ;AAAV;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAjCeV,K;UAIAT,Q;;;MAJAS,K","sourcesContent":["import { isValid } from \"date-fns\"\r\nimport { rem } from \"polished\"\r\nimport React, { useCallback, useEffect, useState } from \"react\"\r\nimport styled, { css, useTheme } from \"styled-components\"\r\nimport { formatTimestamp } from \"./formatTimestamp\"\r\n\r\nconst Display = styled.span`\r\n  display: inline-block;\r\n  height: ${rem(20)};\r\n  cursor: default;\r\n\r\n  color: ${({ theme }) => theme.text.muted};\r\n\r\n  ${({ theme }) =>\r\n    theme.appearance.display === \"cozy\" &&\r\n    css`\r\n      margin-left: ${rem(4)};\r\n\r\n      font-size: ${rem(12)};\r\n      font-weight: 500;\r\n      line-height: ${rem(22)};\r\n      vertical-align: baseline;\r\n    `};\r\n\r\n  ${({ theme }) =>\r\n    theme.appearance.display === \"compact\" &&\r\n    css`\r\n      width: ${rem(48)};\r\n      margin-right: ${rem(8)};\r\n\r\n      font-size: ${rem(11)};\r\n      line-height: ${rem(22)};\r\n      text-align: right;\r\n      text-indent: 0;\r\n    `};\r\n`\r\n\r\nexport type ClockProps = {\r\n  timestamp?: Date\r\n}\r\n\r\nexport function Clock(props: ClockProps) {\r\n  let { timestamp } = props\r\n  if (timestamp && !isValid(timestamp)) timestamp = undefined\r\n\r\n  const theme = useTheme()\r\n\r\n  const format = useCallback(\r\n    (timestamp: Date = new Date()) => {\r\n      if (theme.appearance.display === \"compact\") {\r\n        return timestamp.toLocaleString(\"en-US\", {\r\n          hour: \"numeric\",\r\n          minute: \"numeric\",\r\n          hour12: true,\r\n        })\r\n      }\r\n\r\n      return formatTimestamp(timestamp)\r\n    },\r\n    [theme.appearance.display],\r\n  )\r\n\r\n  const [displayedTime, setDisplayedTime] = useState(() => format(timestamp))\r\n\r\n  useEffect(() => {\r\n    if (!timestamp) {\r\n      const interval = setInterval(() => setDisplayedTime(format()), 1000)\r\n      return () => clearInterval(interval)\r\n    }\r\n\r\n    setDisplayedTime(format(timestamp))\r\n  }, [format, timestamp])\r\n\r\n  return <Display>{displayedTime}</Display>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}