{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\DiscordHookSite\\\\modules\\\\editor\\\\webhook\\\\WebhookControls.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useObserver } from \"mobx-react-lite\";\nimport { applyPatch } from \"mobx-state-tree\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { PrimaryButton } from \"../../../common/input/button/PrimaryButton\";\nimport { SecondaryButton } from \"../../../common/input/button/SecondaryButton\";\nimport { HiddenInputField } from \"../../../common/input/text/HiddenInputField\";\nimport { IconButton } from \"../../../common/layout/IconButton\";\nimport { Stack } from \"../../../common/layout/Stack\";\nimport { ModalManagerContext } from \"../../../common/modal/ModalManagerContext\";\nimport { useRequiredContext } from \"../../../common/state/useRequiredContext\";\nimport { remove } from \"../../../icons/remove\";\nimport { EditorManagerContext } from \"../EditorManagerContext\";\nimport { NetworkErrorModal } from \"./NetworkErrorModal\";\nconst InputAction = styled(IconButton).withConfig({\n  displayName: \"WebhookControls__InputAction\",\n  componentId: \"sc-12rmoi1-0\"\n})([\"margin-left:8px;\"]);\nexport function WebhookControls(props) {\n  const {\n    form\n  } = props;\n  const editorManager = useRequiredContext(EditorManagerContext);\n  const modalManager = useRequiredContext(ModalManagerContext);\n  const {\n    0: submitting,\n    1: setSubmitting\n  } = useState(false);\n\n  const handleSubmit = async () => {\n    if (submitting) return;\n    form.validate();\n    if (!form.isValid) return;\n    setSubmitting(true);\n\n    try {\n      await form.save();\n    } catch {\n      modalManager.spawn({\n        render: () => /*#__PURE__*/_jsxDEV(NetworkErrorModal, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 23\n        }, this)\n      });\n    }\n\n    setSubmitting(false);\n  };\n\n  useEffect(() => {\n    if (editorManager.targets.length > 0) return;\n    applyPatch(form.state.value, [{\n      op: \"add\",\n      path: \"/targets/0\",\n      value: {}\n    }]);\n  });\n  return useObserver(() => {\n    let submitLabel = \"Submit\";\n\n    if (editorManager.messages.every(message => !message.reference)) {\n      submitLabel = \"Send\";\n    } else if (editorManager.messages.every(message => message.reference)) {\n      submitLabel = \"Edit\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(Stack, {\n      gap: 8,\n      children: [editorManager.targets.map((target, index) => {\n        const targetForm = form.repeatingForm(\"targets\").index(index);\n        return /*#__PURE__*/_jsxDEV(HiddenInputField, _objectSpread(_objectSpread({\n          id: `_${target.id}_url`,\n          label: \"Webhook URL\",\n          hideLabel: index > 0,\n          placeholder: \"https://discord.com/api/webhooks/...\",\n          error: targetForm.field(\"url\").error\n        }, targetForm.field(\"url\").inputProps), {}, {\n          children: index === 0 ? /*#__PURE__*/_jsxDEV(PrimaryButton, {\n            disabled: editorManager.targets.some(target => !target.exists) || editorManager.messages.length === 0,\n            onClick: handleSubmit,\n            children: submitLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(InputAction, {\n            icon: remove,\n            label: \"Remove\",\n            onClick: () => {\n              applyPatch(targetForm.state.value, [{\n                op: \"remove\",\n                path: targetForm.path\n              }]);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this)\n        }), target.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(SecondaryButton, {\n          onClick: () => {\n            applyPatch(form.state.value, [{\n              op: \"add\",\n              path: `/targets/${editorManager.targets.length}`,\n              value: {}\n            }]);\n          },\n          children: \"Add Webhook\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  });\n}","map":{"version":3,"sources":["F:/DiscordHookSite/modules/editor/webhook/WebhookControls.tsx"],"names":["useObserver","applyPatch","React","useEffect","useState","styled","PrimaryButton","SecondaryButton","HiddenInputField","IconButton","Stack","ModalManagerContext","useRequiredContext","remove","EditorManagerContext","NetworkErrorModal","InputAction","WebhookControls","props","form","editorManager","modalManager","submitting","setSubmitting","handleSubmit","validate","isValid","save","spawn","render","targets","length","state","value","op","path","submitLabel","messages","every","message","reference","map","target","index","targetForm","repeatingForm","id","field","error","inputProps","some","exists"],"mappings":"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","sourcesContent":["import { useObserver } from \"mobx-react-lite\"\r\nimport { applyPatch } from \"mobx-state-tree\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { PrimaryButton } from \"../../../common/input/button/PrimaryButton\"\r\nimport { SecondaryButton } from \"../../../common/input/button/SecondaryButton\"\r\nimport { HiddenInputField } from \"../../../common/input/text/HiddenInputField\"\r\nimport { IconButton } from \"../../../common/layout/IconButton\"\r\nimport { Stack } from \"../../../common/layout/Stack\"\r\nimport { ModalManagerContext } from \"../../../common/modal/ModalManagerContext\"\r\nimport { useRequiredContext } from \"../../../common/state/useRequiredContext\"\r\nimport { remove } from \"../../../icons/remove\"\r\nimport type { EditorFormState } from \"../../message/state/editorForm\"\r\nimport { EditorManagerContext } from \"../EditorManagerContext\"\r\nimport { NetworkErrorModal } from \"./NetworkErrorModal\"\r\n\r\nconst InputAction = styled(IconButton)`\r\n  margin-left: 8px;\r\n`\r\n\r\nexport type WebhookControlsProps = {\r\n  form: EditorFormState\r\n}\r\n\r\nexport function WebhookControls(props: WebhookControlsProps) {\r\n  const { form } = props\r\n\r\n  const editorManager = useRequiredContext(EditorManagerContext)\r\n\r\n  const modalManager = useRequiredContext(ModalManagerContext)\r\n\r\n  const [submitting, setSubmitting] = useState(false)\r\n  const handleSubmit = async () => {\r\n    if (submitting) return\r\n\r\n    form.validate()\r\n    if (!form.isValid) return\r\n\r\n    setSubmitting(true)\r\n\r\n    try {\r\n      await form.save()\r\n    } catch {\r\n      modalManager.spawn({\r\n        render: () => <NetworkErrorModal />,\r\n      })\r\n    }\r\n\r\n    setSubmitting(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (editorManager.targets.length > 0) return\r\n\r\n    applyPatch(form.state.value, [\r\n      {\r\n        op: \"add\",\r\n        path: \"/targets/0\",\r\n        value: {},\r\n      },\r\n    ])\r\n  })\r\n\r\n  return useObserver(() => {\r\n    let submitLabel = \"Submit\"\r\n    if (editorManager.messages.every(message => !message.reference)) {\r\n      submitLabel = \"Send\"\r\n    } else if (editorManager.messages.every(message => message.reference)) {\r\n      submitLabel = \"Edit\"\r\n    }\r\n\r\n    return (\r\n      <Stack gap={8}>\r\n        {editorManager.targets.map((target, index) => {\r\n          const targetForm = form.repeatingForm(\"targets\").index(index)\r\n\r\n          return (\r\n            <HiddenInputField\r\n              key={target.id}\r\n              id={`_${target.id}_url`}\r\n              label=\"Webhook URL\"\r\n              hideLabel={index > 0}\r\n              placeholder=\"https://discord.com/api/webhooks/...\"\r\n              error={targetForm.field(\"url\").error}\r\n              {...targetForm.field(\"url\").inputProps}\r\n            >\r\n              {index === 0 ? (\r\n                <PrimaryButton\r\n                  disabled={\r\n                    editorManager.targets.some(target => !target.exists) ||\r\n                    editorManager.messages.length === 0\r\n                  }\r\n                  onClick={handleSubmit}\r\n                >\r\n                  {submitLabel}\r\n                </PrimaryButton>\r\n              ) : (\r\n                <InputAction\r\n                  icon={remove}\r\n                  label=\"Remove\"\r\n                  onClick={() => {\r\n                    applyPatch(targetForm.state.value, [\r\n                      {\r\n                        op: \"remove\",\r\n                        path: targetForm.path,\r\n                      },\r\n                    ])\r\n                  }}\r\n                />\r\n              )}\r\n            </HiddenInputField>\r\n          )\r\n        })}\r\n        <div>\r\n          <SecondaryButton\r\n            onClick={() => {\r\n              applyPatch(form.state.value, [\r\n                {\r\n                  op: \"add\",\r\n                  path: `/targets/${editorManager.targets.length}`,\r\n                  value: {},\r\n                },\r\n              ])\r\n            }}\r\n          >\r\n            Add Webhook\r\n          </SecondaryButton>\r\n        </div>\r\n      </Stack>\r\n    )\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}