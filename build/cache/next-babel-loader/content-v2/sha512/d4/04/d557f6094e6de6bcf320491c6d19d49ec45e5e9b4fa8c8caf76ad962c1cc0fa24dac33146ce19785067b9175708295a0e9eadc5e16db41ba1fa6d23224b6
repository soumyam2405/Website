{"ast":null,"code":"import _defineProperty from \"F:/DiscordHookSite/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const shorten = async url => {\n  const response = await fetch(\"https://share.discohook.app/create\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      url\n    })\n  });\n  if (!response.ok) throw new Error(\"Could not get short URL.\");\n  const data = await response.json();\n  return _objectSpread(_objectSpread({}, data), {}, {\n    expires: new Date(data.expires)\n  });\n};","map":{"version":3,"sources":["F:/DiscordHookSite/common/utilities/shorten.ts"],"names":["shorten","url","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","expires","Date"],"mappings":";;;;;;AAMA,OAAO,MAAMA,OAAO,GAAG,MAAOC,GAAP,IAAuB;AAC5C,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAD,EAAuC;AACjEC,IAAAA,MAAM,EAAE,MADyD;AAEjEC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFwD;AAGjEC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA;AAAF,KAAf;AAH2D,GAAvC,CAA5B;AAMA,MAAI,CAACC,QAAQ,CAACO,EAAd,EAAkB,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AAElB,QAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAT,EAAnB;AAEA,yCACKD,IADL;AAEEE,IAAAA,OAAO,EAAE,IAAIC,IAAJ,CAASH,IAAI,CAACE,OAAd;AAFX;AAID,CAfM","sourcesContent":["export type ShortenResponse = {\r\n  id: string\r\n  url: string\r\n  expires: Date\r\n}\r\n\r\nexport const shorten = async (url: string) => {\r\n  const response = await fetch(\"https://share.discohook.app/create\", {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ url }),\r\n  })\r\n\r\n  if (!response.ok) throw new Error(\"Could not get short URL.\")\r\n\r\n  const data = await response.json()\r\n\r\n  return {\r\n    ...data,\r\n    expires: new Date(data.expires),\r\n  } as ShortenResponse\r\n}\r\n"]},"metadata":{},"sourceType":"module"}