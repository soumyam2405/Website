{"ast":null,"code":"import { useRef } from \"react\";\nconst UNINITIALISED = Symbol(\"UNINITIALISED\");\nexport const useLazyValue = initializer => {\n  const ref = useRef(UNINITIALISED);\n\n  if (ref.current === UNINITIALISED) {\n    ref.current = initializer();\n  }\n\n  return ref.current;\n};","map":{"version":3,"sources":["F:/DiscordHookSite/common/state/useLazyValue.ts"],"names":["useRef","UNINITIALISED","Symbol","useLazyValue","initializer","ref","current"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AAEA,MAAMC,aAAa,GAAGC,MAAM,CAAC,eAAD,CAA5B;AAEA,OAAO,MAAMC,YAAY,GAAOC,WAAJ,IAA6B;AACvD,QAAMC,GAAG,GAAGL,MAAM,CAAEC,aAAF,CAAlB;;AAEA,MAAII,GAAG,CAACC,OAAJ,KAAiBL,aAArB,EAAgD;AAC9CI,IAAAA,GAAG,CAACC,OAAJ,GAAcF,WAAW,EAAzB;AACD;;AAED,SAAOC,GAAG,CAACC,OAAX;AACD,CARM","sourcesContent":["import { useRef } from \"react\"\r\n\r\nconst UNINITIALISED = Symbol(\"UNINITIALISED\")\r\n\r\nexport const useLazyValue = <T>(initializer: () => T) => {\r\n  const ref = useRef((UNINITIALISED as unknown) as T)\r\n\r\n  if (ref.current === (UNINITIALISED as unknown)) {\r\n    ref.current = initializer()\r\n  }\r\n\r\n  return ref.current\r\n}\r\n"]},"metadata":{},"sourceType":"module"}