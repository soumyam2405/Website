{"ast":null,"code":"var _class, _temp;\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nimport { action } from \"mobx\";\nimport { getUniqueId } from \"../state/uid\";\nexport let Modal = (_class = (_temp = class Modal {\n  constructor(manager, options) {\n    this.id = getUniqueId();\n    this.manager = void 0;\n    this.render = void 0;\n    this.manager = manager;\n    this.render = options.render;\n  }\n\n  dismiss() {\n    this.manager.dismiss(this);\n  }\n\n}, _temp), (_applyDecoratedDescriptor(_class.prototype, \"dismiss\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"dismiss\"), _class.prototype)), _class);","map":{"version":3,"sources":["F:/DiscordHookSite/common/modal/Modal.ts"],"names":["action","getUniqueId","Modal","constructor","manager","options","id","render","dismiss"],"mappings":";;;;AAAA,SAASA,MAAT,QAAuB,MAAvB;AAEA,SAASC,WAAT,QAA4B,cAA5B;AAOA,WAAaC,KAAb,sBAAO,MAAMA,KAAN,CAAY;AAMjBC,EAAAA,WAAW,CAACC,OAAD,EAAwBC,OAAxB,EAA+C;AAAA,SALjDC,EAKiD,GAL5CL,WAAW,EAKiC;AAAA,SAHzCG,OAGyC;AAAA,SAFjDG,MAEiD;AACxD,SAAKH,OAAL,GAAeA,OAAf;AACA,SAAKG,MAAL,GAAcF,OAAO,CAACE,MAAtB;AACD;;AAEOC,EAAAA,OAAR,GAAkB;AAChB,SAAKJ,OAAL,CAAaI,OAAb,CAAqB,IAArB;AACD;;AAbgB,CAAnB,mEAWGR,MAXH","sourcesContent":["import { action } from \"mobx\"\r\nimport type { ReactNode } from \"react\"\r\nimport { getUniqueId } from \"../state/uid\"\r\nimport type { ModalManager } from \"./ModalManager\"\r\n\r\nexport type ModalOptions = {\r\n  render: () => ReactNode\r\n}\r\n\r\nexport class Modal {\r\n  readonly id = getUniqueId()\r\n\r\n  private readonly manager: ModalManager\r\n  readonly render: () => ReactNode\r\n\r\n  constructor(manager: ModalManager, options: ModalOptions) {\r\n    this.manager = manager\r\n    this.render = options.render\r\n  }\r\n\r\n  @action dismiss() {\r\n    this.manager.dismiss(this)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}