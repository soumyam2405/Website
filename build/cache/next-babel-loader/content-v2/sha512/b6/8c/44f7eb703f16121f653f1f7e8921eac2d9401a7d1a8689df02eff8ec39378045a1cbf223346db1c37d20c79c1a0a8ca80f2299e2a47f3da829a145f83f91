{"ast":null,"code":"/* eslint-disable unicorn/no-useless-undefined */\nimport { useCallback, useEffect, useState } from \"react\";\nimport { getUniqueId } from \"../state/uid\";\nimport { useRequiredContext } from \"../state/useRequiredContext\";\nimport { PopoverManagerContext } from \"./PopoverManagerContext\";\nexport const usePopover = options => {\n  const {\n    ref,\n    render,\n    placement,\n    shards = []\n  } = options;\n  const manager = useRequiredContext(PopoverManagerContext);\n  const {\n    0: popoverName,\n    1: setPopoverName\n  } = useState();\n\n  const spawn = () => {\n    const {\n      current: anchor\n    } = ref;\n    if (!anchor || popoverName) return;\n    const name = `usePopover#${getUniqueId()}`;\n    setPopoverName(name);\n    manager.spawn({\n      name,\n      placement,\n      anchor,\n      shards,\n      render,\n      onDismiss: () => setPopoverName(undefined)\n    });\n  };\n\n  const dismiss = useCallback(() => {\n    if (popoverName) {\n      manager.dismiss(popoverName);\n      setPopoverName(undefined);\n    }\n  }, [manager, popoverName]);\n\n  const toggle = () => {\n    if (popoverName) {\n      dismiss();\n    } else {\n      spawn();\n    }\n  };\n\n  useEffect(() => {\n    if (popoverName) {\n      manager.update(popoverName, {\n        placement,\n        render\n      });\n    }\n  });\n  useEffect(() => () => dismiss(), [dismiss]);\n  return {\n    active: Boolean(popoverName),\n    dismiss,\n    toggle,\n    spawn\n  };\n};","map":{"version":3,"sources":["F:/DiscordHookSite/common/popover/usePopover.tsx"],"names":["useCallback","useEffect","useState","getUniqueId","useRequiredContext","PopoverManagerContext","usePopover","options","ref","render","placement","shards","manager","popoverName","setPopoverName","spawn","current","anchor","name","onDismiss","undefined","dismiss","toggle","update","active","Boolean"],"mappings":"AAAA;AAGA,SAA+BA,WAA/B,EAA4CC,SAA5C,EAAuDC,QAAvD,QAAuE,OAAvE;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AASA,OAAO,MAAMC,UAAU,GAAIC,OAAD,IAAgC;AACxD,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,MAAP;AAAeC,IAAAA,SAAf;AAA0BC,IAAAA,MAAM,GAAG;AAAnC,MAA0CJ,OAAhD;AAEA,QAAMK,OAAO,GAAGR,kBAAkB,CAACC,qBAAD,CAAlC;AAEA,QAAM;AAAA,OAACQ,WAAD;AAAA,OAAcC;AAAd,MAAgCZ,QAAQ,EAA9C;;AAEA,QAAMa,KAAK,GAAG,MAAM;AAClB,UAAM;AAAEC,MAAAA,OAAO,EAAEC;AAAX,QAAsBT,GAA5B;AACA,QAAI,CAACS,MAAD,IAAWJ,WAAf,EAA4B;AAE5B,UAAMK,IAAI,GAAI,cAAaf,WAAW,EAAG,EAAzC;AACAW,IAAAA,cAAc,CAACI,IAAD,CAAd;AAEAN,IAAAA,OAAO,CAACG,KAAR,CAAc;AACZG,MAAAA,IADY;AAEZR,MAAAA,SAFY;AAGZO,MAAAA,MAHY;AAIZN,MAAAA,MAJY;AAKZF,MAAAA,MALY;AAMZU,MAAAA,SAAS,EAAE,MAAML,cAAc,CAACM,SAAD;AANnB,KAAd;AAQD,GAfD;;AAiBA,QAAMC,OAAO,GAAGrB,WAAW,CAAC,MAAM;AAChC,QAAIa,WAAJ,EAAiB;AACfD,MAAAA,OAAO,CAACS,OAAR,CAAgBR,WAAhB;AACAC,MAAAA,cAAc,CAACM,SAAD,CAAd;AACD;AACF,GAL0B,EAKxB,CAACR,OAAD,EAAUC,WAAV,CALwB,CAA3B;;AAOA,QAAMS,MAAM,GAAG,MAAM;AACnB,QAAIT,WAAJ,EAAiB;AACfQ,MAAAA,OAAO;AACR,KAFD,MAEO;AACLN,MAAAA,KAAK;AACN;AACF,GAND;;AAQAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,WAAJ,EAAiB;AACfD,MAAAA,OAAO,CAACW,MAAR,CAAeV,WAAf,EAA4B;AAC1BH,QAAAA,SAD0B;AAE1BD,QAAAA;AAF0B,OAA5B;AAID;AACF,GAPQ,CAAT;AASAR,EAAAA,SAAS,CAAC,MAAM,MAAMoB,OAAO,EAApB,EAAwB,CAACA,OAAD,CAAxB,CAAT;AAEA,SAAO;AACLG,IAAAA,MAAM,EAAEC,OAAO,CAACZ,WAAD,CADV;AAELQ,IAAAA,OAFK;AAGLC,IAAAA,MAHK;AAILP,IAAAA;AAJK,GAAP;AAMD,CAxDM","sourcesContent":["/* eslint-disable unicorn/no-useless-undefined */\r\n\r\nimport type { Placement } from \"@popperjs/core\"\r\nimport { ReactNode, RefObject, useCallback, useEffect, useState } from \"react\"\r\nimport { getUniqueId } from \"../state/uid\"\r\nimport { useRequiredContext } from \"../state/useRequiredContext\"\r\nimport { PopoverManagerContext } from \"./PopoverManagerContext\"\r\n\r\nexport type UsePopoverOptions = {\r\n  ref: RefObject<HTMLElement>\r\n  render: () => ReactNode\r\n  placement: Placement\r\n  shards?: RefObject<HTMLElement>[]\r\n}\r\n\r\nexport const usePopover = (options: UsePopoverOptions) => {\r\n  const { ref, render, placement, shards = [] } = options\r\n\r\n  const manager = useRequiredContext(PopoverManagerContext)\r\n\r\n  const [popoverName, setPopoverName] = useState<string>()\r\n\r\n  const spawn = () => {\r\n    const { current: anchor } = ref\r\n    if (!anchor || popoverName) return\r\n\r\n    const name = `usePopover#${getUniqueId()}`\r\n    setPopoverName(name)\r\n\r\n    manager.spawn({\r\n      name,\r\n      placement,\r\n      anchor,\r\n      shards,\r\n      render,\r\n      onDismiss: () => setPopoverName(undefined),\r\n    })\r\n  }\r\n\r\n  const dismiss = useCallback(() => {\r\n    if (popoverName) {\r\n      manager.dismiss(popoverName)\r\n      setPopoverName(undefined)\r\n    }\r\n  }, [manager, popoverName])\r\n\r\n  const toggle = () => {\r\n    if (popoverName) {\r\n      dismiss()\r\n    } else {\r\n      spawn()\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (popoverName) {\r\n      manager.update(popoverName, {\r\n        placement,\r\n        render,\r\n      })\r\n    }\r\n  })\r\n\r\n  useEffect(() => () => dismiss(), [dismiss])\r\n\r\n  return {\r\n    active: Boolean(popoverName),\r\n    dismiss,\r\n    toggle,\r\n    spawn,\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}