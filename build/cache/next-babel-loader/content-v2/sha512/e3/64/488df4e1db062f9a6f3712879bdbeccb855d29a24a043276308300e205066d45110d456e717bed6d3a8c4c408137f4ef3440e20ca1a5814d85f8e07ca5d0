{"ast":null,"code":"/* eslint-disable import/no-cycle */\nimport { getParentOfType, types } from \"mobx-state-tree\";\nimport { getUniqueId } from \"../../../../common/state/uid\";\nimport { EmbedModel } from \"./EmbedModel\";\nexport const FieldModel = types.model(\"FieldModel\", {\n  id: types.optional(types.identifierNumber, getUniqueId),\n  name: \"\",\n  value: \"\",\n  inline: false\n}).views(self => ({\n  get embed() {\n    return getParentOfType(self, EmbedModel);\n  },\n\n  get displayName() {\n    /* eslint-disable @typescript-eslint/prefer-nullish-coalescing */\n    return self.name.split(\"\\n\").map(line => line.trim()).find(Boolean) || self.value.split(\"\\n\").map(line => line.trim()).find(Boolean) || undefined;\n    /* eslint-enable @typescript-eslint/prefer-nullish-coalescing */\n  }\n\n})).actions(self => ({\n  set(key, value) {\n    self[key] = value;\n  }\n\n})); // eslint-disable-next-line @typescript-eslint/no-empty-interface, @typescript-eslint/consistent-type-definitions","map":{"version":3,"sources":["F:/DiscordHookSite/modules/message/state/models/FieldModel.ts"],"names":["getParentOfType","types","getUniqueId","EmbedModel","FieldModel","model","id","optional","identifierNumber","name","value","inline","views","self","embed","displayName","split","map","line","trim","find","Boolean","undefined","actions","set","key"],"mappings":"AAAA;AAEA,SACEA,eADF,EAIEC,KAJF,QAKO,iBALP;AAMA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAAoBC,UAApB,QAAsC,cAAtC;AAEA,OAAO,MAAMC,UAAU,GAAGH,KAAK,CAC5BI,KADuB,CACjB,YADiB,EACH;AACnBC,EAAAA,EAAE,EAAEL,KAAK,CAACM,QAAN,CAAeN,KAAK,CAACO,gBAArB,EAAuCN,WAAvC,CADe;AAEnBO,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,KAAK,EAAE,EAHY;AAInBC,EAAAA,MAAM,EAAE;AAJW,CADG,EAOvBC,KAPuB,CAOjBC,IAAI,KAAK;AACd,MAAIC,KAAJ,GAAuB;AACrB,WAAOd,eAAe,CAACa,IAAD,EAAOV,UAAP,CAAtB;AACD,GAHa;;AAKd,MAAIY,WAAJ,GAAkB;AAChB;AACA,WACEF,IAAI,CAACJ,IAAL,CACGO,KADH,CACS,IADT,EAEGC,GAFH,CAEOC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAFf,EAGGC,IAHH,CAGQC,OAHR,KAIAR,IAAI,CAACH,KAAL,CACGM,KADH,CACS,IADT,EAEGC,GAFH,CAEOC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAFf,EAGGC,IAHH,CAGQC,OAHR,CAJA,IAQAC,SATF;AAWA;AACD;;AAnBa,CAAL,CAPa,EA4BvBC,OA5BuB,CA4BfV,IAAI,KAAK;AAChBW,EAAAA,GAAG,CACDC,GADC,EAEDf,KAFC,EAGK;AACNG,IAAAA,IAAI,CAACY,GAAD,CAAJ,GAAYf,KAAZ;AACD;;AANe,CAAL,CA5BW,CAAnB,C,CAqCP","sourcesContent":["/* eslint-disable import/no-cycle */\r\n\r\nimport {\r\n  getParentOfType,\r\n  Instance,\r\n  SnapshotOrInstance,\r\n  types,\r\n} from \"mobx-state-tree\"\r\nimport { getUniqueId } from \"../../../../common/state/uid\"\r\nimport { EmbedLike, EmbedModel } from \"./EmbedModel\"\r\n\r\nexport const FieldModel = types\r\n  .model(\"FieldModel\", {\r\n    id: types.optional(types.identifierNumber, getUniqueId),\r\n    name: \"\",\r\n    value: \"\",\r\n    inline: false,\r\n  })\r\n  .views(self => ({\r\n    get embed(): EmbedLike {\r\n      return getParentOfType(self, EmbedModel)\r\n    },\r\n\r\n    get displayName() {\r\n      /* eslint-disable @typescript-eslint/prefer-nullish-coalescing */\r\n      return (\r\n        self.name\r\n          .split(\"\\n\")\r\n          .map(line => line.trim())\r\n          .find(Boolean) ||\r\n        self.value\r\n          .split(\"\\n\")\r\n          .map(line => line.trim())\r\n          .find(Boolean) ||\r\n        undefined\r\n      )\r\n      /* eslint-enable @typescript-eslint/prefer-nullish-coalescing */\r\n    },\r\n  }))\r\n  .actions(self => ({\r\n    set<K extends keyof typeof self>(\r\n      key: K,\r\n      value: SnapshotOrInstance<typeof self[K]>,\r\n    ): void {\r\n      self[key] = value\r\n    },\r\n  }))\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface, @typescript-eslint/consistent-type-definitions\r\nexport interface FieldLike extends Instance<typeof FieldModel> {}\r\n"]},"metadata":{},"sourceType":"module"}