{"ast":null,"code":"import { EMOJI_TO_NAME } from \"./emoji\"; // Matches string symbols instead of code points\n// Regex extracted from lodash: https://github.com/lodash/lodash/blob/4.17.15/lodash.js#L261\n// eslint-disable-next-line no-misleading-character-class\n\nconst UNICODE_CHARACTER_RE = /\\ud83c[\\udffb-\\udfff](?=\\ud83c[\\udffb-\\udfff])|(?:[^\\ud800-\\udfff][\\u0300-\\u036f\\u20d0-\\u20ff\\ufe20-\\ufe2f]?|[\\u0300-\\u036f\\u20d0-\\u20ff\\ufe20-\\ufe2f]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\u20d0-\\u20ff\\ufe20-\\ufe2f]|\\ud83c[\\udffb-\\udfff])?(?:\\u200d(?:[^\\ud800-\\udfff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\u20d0-\\u20ff\\ufe20-\\ufe2f]|\\ud83c[\\udffb-\\udfff])?)*/g;\nconst CANCEL_TAG = String.fromCharCode(0xe007f);\nconst WAVING_BLACK_FLAG = \"🏴\";\n\nconst getEmoji = text => EMOJI_TO_NAME.has(text) ? `:${EMOJI_TO_NAME.get(text)}:` : text;\n\nexport const convertEmojiToNames = text => {\n  let result = \"\";\n  let buffer; // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n\n  for (const char of (_text$match = text.match(UNICODE_CHARACTER_RE)) !== null && _text$match !== void 0 ? _text$match : []) {\n    var _text$match;\n\n    if (buffer) {\n      if (char === CANCEL_TAG) {\n        result += getEmoji(buffer + char);\n        buffer = undefined;\n        continue;\n      } else if (/^\\udb40[\\udb61-\\udb7a]$/.test(char)) {\n        buffer += char;\n        continue;\n      } else {\n        result += getEmoji(buffer);\n        buffer = undefined;\n      }\n    } else if (char === WAVING_BLACK_FLAG) {\n      buffer = char;\n      continue;\n    }\n\n    result += getEmoji(char);\n  }\n\n  return result;\n};","map":{"version":3,"sources":["F:/DiscordHookSite/modules/markdown/emoji/convertEmojiToNames.ts"],"names":["EMOJI_TO_NAME","UNICODE_CHARACTER_RE","CANCEL_TAG","String","fromCharCode","WAVING_BLACK_FLAG","getEmoji","text","has","get","convertEmojiToNames","result","buffer","char","match","undefined","test"],"mappings":"AAAA,SAASA,aAAT,QAA8B,SAA9B,C,CAEA;AACA;AACA;;AACA,MAAMC,oBAAoB,GAAG,ueAA7B;AAEA,MAAMC,UAAU,GAAGC,MAAM,CAACC,YAAP,CAAoB,OAApB,CAAnB;AACA,MAAMC,iBAAiB,GAAG,IAA1B;;AAEA,MAAMC,QAAQ,GAAIC,IAAD,IACfP,aAAa,CAACQ,GAAd,CAAkBD,IAAlB,IAA2B,IAAGP,aAAa,CAACS,GAAd,CAAkBF,IAAlB,CAAwB,GAAtD,GAA2DA,IAD7D;;AAGA,OAAO,MAAMG,mBAAmB,GAAIH,IAAD,IAAkB;AACnD,MAAII,MAAM,GAAG,EAAb;AAEA,MAAIC,MAAJ,CAHmD,CAKnD;;AACA,OAAK,MAAMC,IAAX,mBAAmBN,IAAI,CAACO,KAAL,CAAWb,oBAAX,CAAnB,qDAAuD,EAAvD,EAA2D;AAAA;;AACzD,QAAIW,MAAJ,EAAY;AACV,UAAIC,IAAI,KAAKX,UAAb,EAAyB;AACvBS,QAAAA,MAAM,IAAIL,QAAQ,CAACM,MAAM,GAAGC,IAAV,CAAlB;AACAD,QAAAA,MAAM,GAAGG,SAAT;AACA;AACD,OAJD,MAIO,IAAI,0BAA0BC,IAA1B,CAA+BH,IAA/B,CAAJ,EAA0C;AAC/CD,QAAAA,MAAM,IAAIC,IAAV;AACA;AACD,OAHM,MAGA;AACLF,QAAAA,MAAM,IAAIL,QAAQ,CAACM,MAAD,CAAlB;AACAA,QAAAA,MAAM,GAAGG,SAAT;AACD;AACF,KAZD,MAYO,IAAIF,IAAI,KAAKR,iBAAb,EAAgC;AACrCO,MAAAA,MAAM,GAAGC,IAAT;AACA;AACD;;AAEDF,IAAAA,MAAM,IAAIL,QAAQ,CAACO,IAAD,CAAlB;AACD;;AAED,SAAOF,MAAP;AACD,CA5BM","sourcesContent":["import { EMOJI_TO_NAME } from \"./emoji\"\r\n\r\n// Matches string symbols instead of code points\r\n// Regex extracted from lodash: https://github.com/lodash/lodash/blob/4.17.15/lodash.js#L261\r\n// eslint-disable-next-line no-misleading-character-class\r\nconst UNICODE_CHARACTER_RE = /\\ud83c[\\udffb-\\udfff](?=\\ud83c[\\udffb-\\udfff])|(?:[^\\ud800-\\udfff][\\u0300-\\u036f\\u20d0-\\u20ff\\ufe20-\\ufe2f]?|[\\u0300-\\u036f\\u20d0-\\u20ff\\ufe20-\\ufe2f]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\u20d0-\\u20ff\\ufe20-\\ufe2f]|\\ud83c[\\udffb-\\udfff])?(?:\\u200d(?:[^\\ud800-\\udfff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\u20d0-\\u20ff\\ufe20-\\ufe2f]|\\ud83c[\\udffb-\\udfff])?)*/g\r\n\r\nconst CANCEL_TAG = String.fromCharCode(0xe007f)\r\nconst WAVING_BLACK_FLAG = \"🏴\"\r\n\r\nconst getEmoji = (text: string) =>\r\n  EMOJI_TO_NAME.has(text) ? `:${EMOJI_TO_NAME.get(text)}:` : text\r\n\r\nexport const convertEmojiToNames = (text: string) => {\r\n  let result = \"\"\r\n\r\n  let buffer: string | undefined\r\n\r\n  // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\r\n  for (const char of text.match(UNICODE_CHARACTER_RE) ?? []) {\r\n    if (buffer) {\r\n      if (char === CANCEL_TAG) {\r\n        result += getEmoji(buffer + char)\r\n        buffer = undefined\r\n        continue\r\n      } else if (/^\\udb40[\\udb61-\\udb7a]$/.test(char)) {\r\n        buffer += char\r\n        continue\r\n      } else {\r\n        result += getEmoji(buffer)\r\n        buffer = undefined\r\n      }\r\n    } else if (char === WAVING_BLACK_FLAG) {\r\n      buffer = char\r\n      continue\r\n    }\r\n\r\n    result += getEmoji(char)\r\n  }\r\n\r\n  return result\r\n}\r\n"]},"metadata":{},"sourceType":"module"}