{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createPopper } from \"@popperjs/core\";\nimport { animated, useTransition } from \"@react-spring/web\";\nimport { rgb, size } from \"polished\";\nimport React, { useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useAutorun } from \"../state/useAutorun\";\nimport { useIsomorphicLayoutEffect } from \"../state/useIsomorphicLayoutEffect\";\nconst TooltipContainer = styled(animated.div).withConfig({\n  componentId: \"sc-1q1pha4-0\"\n})([\"padding:8px 11px;background:\", \";border-radius:4px;font-size:15px;font-weight:500;color:\", \";box-shadow:\", \";transform-origin:bottom;\"], rgb(0, 0, 0), rgb(255, 255, 255), ({\n  theme\n}) => theme.elavation.high);\nconst Arrow = styled.div.withConfig({\n  componentId: \"sc-1q1pha4-1\"\n})([\"&,&::before{\", \" position:absolute;z-index:-1;}&::before{content:\\\"\\\";transform:rotate(45deg);background:\", \";}\"], size(10), rgb(0, 0, 0));\nexport function TooltipItem(props) {\n  const {\n    tooltip\n  } = props;\n  const popperRef = useRef(null);\n  const arrowRef = useRef(null);\n  useIsomorphicLayoutEffect(() => {\n    const {\n      current: popper\n    } = popperRef;\n    const {\n      current: arrow\n    } = arrowRef;\n    if (!popper || !arrow) return;\n    const instance = createPopper(tooltip.anchor, popper, {\n      placement: \"top\",\n      modifiers: [{\n        name: \"offset\",\n        options: {\n          offset: [0, 4]\n        }\n      }, {\n        name: \"arrow\",\n        options: {\n          element: arrow\n        }\n      }]\n    });\n    return () => {\n      instance.destroy();\n    };\n  });\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const transition = useTransition(visible, {\n    key: Number(visible),\n    config: {\n      friction: 20,\n      tension: 400,\n      clamp: true\n    },\n    from: {\n      opacity: 0,\n      scale: 0.9\n    },\n    enter: {\n      opacity: 1,\n      scale: 1\n    },\n    leave: {\n      opacity: 0,\n      scale: 0.9\n    }\n  });\n\n  const mouseEnter = () => setVisible(true);\n\n  const mouseLeave = () => setVisible(false);\n\n  useAutorun(() => {\n    tooltip.anchor.addEventListener(\"mouseenter\", mouseEnter);\n    tooltip.anchor.addEventListener(\"mouseleave\", mouseLeave);\n    return () => {\n      tooltip.anchor.removeEventListener(\"mouseenter\", mouseEnter);\n      tooltip.anchor.removeEventListener(\"mouseleave\", mouseLeave);\n    };\n  });\n  return transition((style, item) => item && /*#__PURE__*/_jsx(\"div\", {\n    ref: popperRef,\n    style: {\n      pointerEvents: \"none\",\n      position: \"absolute\"\n    },\n    children: /*#__PURE__*/_jsxs(TooltipContainer, {\n      style: style,\n      children: [tooltip.content, /*#__PURE__*/_jsx(Arrow, {\n        ref: arrowRef\n      })]\n    })\n  }));\n}","map":{"version":3,"sources":["F:/DiscordHookSite/common/tooltip/TooltipItem.tsx"],"names":["createPopper","animated","useTransition","rgb","size","React","useRef","useState","styled","useAutorun","useIsomorphicLayoutEffect","TooltipContainer","div","theme","elavation","high","Arrow","TooltipItem","props","tooltip","popperRef","arrowRef","current","popper","arrow","instance","anchor","placement","modifiers","name","options","offset","element","destroy","visible","setVisible","transition","key","Number","config","friction","tension","clamp","from","opacity","scale","enter","leave","mouseEnter","mouseLeave","addEventListener","removeEventListener","style","item","pointerEvents","position","content"],"mappings":"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","sourcesContent":["import { createPopper } from \"@popperjs/core\"\r\nimport { animated, useTransition } from \"@react-spring/web\"\r\nimport { rgb, size } from \"polished\"\r\nimport React, { useRef, useState } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { useAutorun } from \"../state/useAutorun\"\r\nimport { useIsomorphicLayoutEffect } from \"../state/useIsomorphicLayoutEffect\"\r\nimport type { Tooltip } from \"./Tooltip\"\r\n\r\nconst TooltipContainer = styled(animated.div)`\r\n  padding: 8px 11px;\r\n  background: ${rgb(0, 0, 0)};\r\n  border-radius: 4px;\r\n\r\n  font-size: 15px;\r\n  font-weight: 500;\r\n  color: ${rgb(255, 255, 255)};\r\n\r\n  box-shadow: ${({ theme }) => theme.elavation.high};\r\n\r\n  transform-origin: bottom;\r\n`\r\n\r\nconst Arrow = styled.div`\r\n  &,\r\n  &::before {\r\n    ${size(10)}\r\n    position: absolute;\r\n    z-index: -1;\r\n  }\r\n\r\n  &::before {\r\n    content: \"\";\r\n    transform: rotate(45deg);\r\n    background: ${rgb(0, 0, 0)};\r\n  }\r\n`\r\n\r\nexport type TooltipItemProps = {\r\n  tooltip: Tooltip\r\n}\r\n\r\nexport function TooltipItem(props: TooltipItemProps) {\r\n  const { tooltip } = props\r\n\r\n  const popperRef = useRef<HTMLDivElement>(null)\r\n  const arrowRef = useRef<HTMLDivElement>(null)\r\n\r\n  useIsomorphicLayoutEffect(() => {\r\n    const { current: popper } = popperRef\r\n    const { current: arrow } = arrowRef\r\n    if (!popper || !arrow) return\r\n\r\n    const instance = createPopper(tooltip.anchor, popper, {\r\n      placement: \"top\",\r\n      modifiers: [\r\n        {\r\n          name: \"offset\",\r\n          options: {\r\n            offset: [0, 4],\r\n          },\r\n        },\r\n        {\r\n          name: \"arrow\",\r\n          options: {\r\n            element: arrow,\r\n          },\r\n        },\r\n      ],\r\n    })\r\n\r\n    return () => {\r\n      instance.destroy()\r\n    }\r\n  })\r\n\r\n  const [visible, setVisible] = useState(false)\r\n  const transition = useTransition(visible, {\r\n    key: Number(visible),\r\n    config: { friction: 20, tension: 400, clamp: true },\r\n    from: { opacity: (0 as unknown) as undefined, scale: 0.9 },\r\n    enter: { opacity: (1 as unknown) as undefined, scale: 1 },\r\n    leave: { opacity: (0 as unknown) as undefined, scale: 0.9 },\r\n  })\r\n\r\n  const mouseEnter = () => setVisible(true)\r\n  const mouseLeave = () => setVisible(false)\r\n\r\n  useAutorun(() => {\r\n    tooltip.anchor.addEventListener(\"mouseenter\", mouseEnter)\r\n    tooltip.anchor.addEventListener(\"mouseleave\", mouseLeave)\r\n\r\n    return () => {\r\n      tooltip.anchor.removeEventListener(\"mouseenter\", mouseEnter)\r\n      tooltip.anchor.removeEventListener(\"mouseleave\", mouseLeave)\r\n    }\r\n  })\r\n\r\n  return transition(\r\n    (style, item) =>\r\n      item && (\r\n        <div\r\n          ref={popperRef}\r\n          style={{\r\n            pointerEvents: \"none\",\r\n            position: \"absolute\",\r\n          }}\r\n        >\r\n          <TooltipContainer style={style}>\r\n            {tooltip.content}\r\n            <Arrow ref={arrowRef} />\r\n          </TooltipContainer>\r\n        </div>\r\n      ),\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}