{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\DiscordHookSite\\\\common\\\\input\\\\timestamp\\\\TimestampInputField.tsx\",\n    _s = $RefreshSig$();\n\nimport { getTime } from \"date-fns\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { PopoverContainer } from \"../../popover/PopoverContainer\";\nimport { usePopover } from \"../../popover/usePopover\";\nimport { InputField } from \"../text/InputField\";\nimport { DatePicker } from \"./DatePicker\";\nimport { getDateTimeString } from \"./getDateTimeString\";\nconst TIMESTAMP_FORMAT_RE = /^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2})$/;\nexport function TimestampInputField(props) {\n  _s();\n\n  const {\n    id,\n    value,\n    onChange: handleChange,\n    label\n  } = props;\n  const {\n    0: input,\n    1: setInput\n  } = useState(() => {\n    var _getDateTimeString;\n\n    return (_getDateTimeString = getDateTimeString(value)) !== null && _getDateTimeString !== void 0 ? _getDateTimeString : \"\";\n  });\n  const lastDateRef = useRef(value.getTime());\n  useEffect(() => {\n    // Object.is considers NaN to be equal to NaN\n    if (!Object.is(lastDateRef.current, getTime(value))) {\n      var _getDateTimeString2;\n\n      setInput((_getDateTimeString2 = getDateTimeString(value)) !== null && _getDateTimeString2 !== void 0 ? _getDateTimeString2 : \"\");\n    }\n\n    lastDateRef.current = getTime(value);\n  }, [value]);\n\n  const handleInputChange = value => {\n    setInput(value);\n\n    if (!value) {\n      handleChange(new Date(Number.NaN));\n      return;\n    }\n\n    const match = TIMESTAMP_FORMAT_RE.exec(value);\n    if (!match) return;\n    const [, year, month, day, hours, minutes] = match;\n    handleChange(new Date(Number(year), Number(month) - 1, Number(day), Number(hours), Number(minutes)));\n  };\n\n  const inputRef = useRef(null);\n  const popover = usePopover({\n    ref: inputRef,\n    render: () => /*#__PURE__*/_jsxDEV(PopoverContainer, {\n      children: /*#__PURE__*/_jsxDEV(DatePicker, {\n        date: value,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this),\n    placement: \"bottom-start\",\n    shards: [inputRef]\n  });\n  return /*#__PURE__*/_jsxDEV(InputField, {\n    ref: inputRef,\n    id: id,\n    value: input,\n    label: label,\n    placeholder: \"YYYY-MM-DD hh:mm\",\n    error: input && !TIMESTAMP_FORMAT_RE.test(input) ? \"Invalid date format\" : undefined,\n    onChange: handleInputChange,\n    onClick: () => {\n      popover.spawn();\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TimestampInputField, \"TPw/EtAFZ8Q7YYnzEGt29/ejMWM=\", false, function () {\n  return [usePopover];\n});\n\n_c = TimestampInputField;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimestampInputField\");","map":{"version":3,"sources":["F:/DiscordHookSite/common/input/timestamp/TimestampInputField.tsx"],"names":["getTime","React","useEffect","useRef","useState","PopoverContainer","usePopover","InputField","DatePicker","getDateTimeString","TIMESTAMP_FORMAT_RE","TimestampInputField","props","id","value","onChange","handleChange","label","input","setInput","lastDateRef","Object","is","current","handleInputChange","Date","Number","NaN","match","exec","year","month","day","hours","minutes","inputRef","popover","ref","render","placement","shards","test","undefined","spawn"],"mappings":";;;;;AAAA,SAASA,OAAT,QAAwB,UAAxB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,MAAMC,mBAAmB,GAAG,2CAA5B;AASA,OAAO,SAASC,mBAAT,CAA6BC,KAA7B,EAAyD;AAAA;;AAC9D,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA,QAAQ,EAAEC,YAAvB;AAAqCC,IAAAA;AAArC,MAA+CL,KAArD;AAEA,QAAM;AAAA,OAACM,KAAD;AAAA,OAAQC;AAAR,MAAoBf,QAAQ,CAAC;AAAA;;AAAA,iCAAMK,iBAAiB,CAACK,KAAD,CAAvB,mEAAkC,EAAlC;AAAA,GAAD,CAAlC;AAEA,QAAMM,WAAW,GAAGjB,MAAM,CAASW,KAAK,CAACd,OAAN,EAAT,CAA1B;AACAE,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAI,CAACmB,MAAM,CAACC,EAAP,CAAUF,WAAW,CAACG,OAAtB,EAA+BvB,OAAO,CAACc,KAAD,CAAtC,CAAL,EAAqD;AAAA;;AACnDK,MAAAA,QAAQ,wBAACV,iBAAiB,CAACK,KAAD,CAAlB,qEAA6B,EAA7B,CAAR;AACD;;AAEDM,IAAAA,WAAW,CAACG,OAAZ,GAAsBvB,OAAO,CAACc,KAAD,CAA7B;AACD,GAPQ,EAON,CAACA,KAAD,CAPM,CAAT;;AASA,QAAMU,iBAAiB,GAAIV,KAAD,IAAmB;AAC3CK,IAAAA,QAAQ,CAACL,KAAD,CAAR;;AAEA,QAAI,CAACA,KAAL,EAAY;AACVE,MAAAA,YAAY,CAAC,IAAIS,IAAJ,CAASC,MAAM,CAACC,GAAhB,CAAD,CAAZ;AACA;AACD;;AAED,UAAMC,KAAK,GAAGlB,mBAAmB,CAACmB,IAApB,CAAyBf,KAAzB,CAAd;AACA,QAAI,CAACc,KAAL,EAAY;AAEZ,UAAM,GAAGE,IAAH,EAASC,KAAT,EAAgBC,GAAhB,EAAqBC,KAArB,EAA4BC,OAA5B,IAAuCN,KAA7C;AACAZ,IAAAA,YAAY,CACV,IAAIS,IAAJ,CACEC,MAAM,CAACI,IAAD,CADR,EAEEJ,MAAM,CAACK,KAAD,CAAN,GAAgB,CAFlB,EAGEL,MAAM,CAACM,GAAD,CAHR,EAIEN,MAAM,CAACO,KAAD,CAJR,EAKEP,MAAM,CAACQ,OAAD,CALR,CADU,CAAZ;AASD,GArBD;;AAuBA,QAAMC,QAAQ,GAAGhC,MAAM,CAAmB,IAAnB,CAAvB;AAEA,QAAMiC,OAAO,GAAG9B,UAAU,CAAC;AACzB+B,IAAAA,GAAG,EAAEF,QADoB;AAEzBG,IAAAA,MAAM,EAAE,mBACN,QAAC,gBAAD;AAAA,6BACE,QAAC,UAAD;AAAY,QAAA,IAAI,EAAExB,KAAlB;AAAyB,QAAA,QAAQ,EAAEE;AAAnC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHuB;AAOzBuB,IAAAA,SAAS,EAAE,cAPc;AAQzBC,IAAAA,MAAM,EAAE,CAACL,QAAD;AARiB,GAAD,CAA1B;AAWA,sBACE,QAAC,UAAD;AACE,IAAA,GAAG,EAAEA,QADP;AAEE,IAAA,EAAE,EAAEtB,EAFN;AAGE,IAAA,KAAK,EAAEK,KAHT;AAIE,IAAA,KAAK,EAAED,KAJT;AAKE,IAAA,WAAW,EAAC,kBALd;AAME,IAAA,KAAK,EACHC,KAAK,IAAI,CAACR,mBAAmB,CAAC+B,IAApB,CAAyBvB,KAAzB,CAAV,GACI,qBADJ,GAEIwB,SATR;AAWE,IAAA,QAAQ,EAAElB,iBAXZ;AAYE,IAAA,OAAO,EAAE,MAAM;AACbY,MAAAA,OAAO,CAACO,KAAR;AACD;AAdH;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GArEehC,mB;UAwCEL,U;;;KAxCFK,mB","sourcesContent":["import { getTime } from \"date-fns\"\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nimport { PopoverContainer } from \"../../popover/PopoverContainer\"\r\nimport { usePopover } from \"../../popover/usePopover\"\r\nimport { InputField } from \"../text/InputField\"\r\nimport { DatePicker } from \"./DatePicker\"\r\nimport { getDateTimeString } from \"./getDateTimeString\"\r\n\r\nconst TIMESTAMP_FORMAT_RE = /^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2})$/\r\n\r\nexport type TimestampInputProps = {\r\n  id: string\r\n  value: Date\r\n  onChange: (value: Date) => void\r\n  label: string\r\n}\r\n\r\nexport function TimestampInputField(props: TimestampInputProps) {\r\n  const { id, value, onChange: handleChange, label } = props\r\n\r\n  const [input, setInput] = useState(() => getDateTimeString(value) ?? \"\")\r\n\r\n  const lastDateRef = useRef<number>(value.getTime())\r\n  useEffect(() => {\r\n    // Object.is considers NaN to be equal to NaN\r\n    if (!Object.is(lastDateRef.current, getTime(value))) {\r\n      setInput(getDateTimeString(value) ?? \"\")\r\n    }\r\n\r\n    lastDateRef.current = getTime(value)\r\n  }, [value])\r\n\r\n  const handleInputChange = (value: string) => {\r\n    setInput(value)\r\n\r\n    if (!value) {\r\n      handleChange(new Date(Number.NaN))\r\n      return\r\n    }\r\n\r\n    const match = TIMESTAMP_FORMAT_RE.exec(value)\r\n    if (!match) return\r\n\r\n    const [, year, month, day, hours, minutes] = match\r\n    handleChange(\r\n      new Date(\r\n        Number(year),\r\n        Number(month) - 1,\r\n        Number(day),\r\n        Number(hours),\r\n        Number(minutes),\r\n      ),\r\n    )\r\n  }\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n  const popover = usePopover({\r\n    ref: inputRef,\r\n    render: () => (\r\n      <PopoverContainer>\r\n        <DatePicker date={value} onChange={handleChange} />\r\n      </PopoverContainer>\r\n    ),\r\n    placement: \"bottom-start\",\r\n    shards: [inputRef],\r\n  })\r\n\r\n  return (\r\n    <InputField\r\n      ref={inputRef}\r\n      id={id}\r\n      value={input}\r\n      label={label}\r\n      placeholder=\"YYYY-MM-DD hh:mm\"\r\n      error={\r\n        input && !TIMESTAMP_FORMAT_RE.test(input)\r\n          ? \"Invalid date format\"\r\n          : undefined\r\n      }\r\n      onChange={handleInputChange}\r\n      onClick={() => {\r\n        popover.spawn()\r\n      }}\r\n    />\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}