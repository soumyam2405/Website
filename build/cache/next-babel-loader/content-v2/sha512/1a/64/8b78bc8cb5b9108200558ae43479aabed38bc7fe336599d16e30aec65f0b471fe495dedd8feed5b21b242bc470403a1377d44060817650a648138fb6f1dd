{"ast":null,"code":"var _class, _descriptor, _temp;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { action, observable } from \"mobx\";\nimport { getUniqueId } from \"../state/uid\";\nexport let TooltipManager = (_class = (_temp = class TooltipManager {\n  constructor() {\n    _initializerDefineProperty(this, \"tooltips\", _descriptor, this);\n  }\n\n  add(tooltip) {\n    const id = getUniqueId();\n    this.tooltips.push(_objectSpread(_objectSpread({}, tooltip), {}, {\n      id\n    }));\n    return () => {\n      const index = this.tooltips.findIndex(tooltip => tooltip.id === id);\n\n      if (index >= 0) {\n        this.tooltips.splice(index, 1);\n      }\n    };\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"tooltips\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"add\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"add\"), _class.prototype)), _class);","map":{"version":3,"sources":["F:/DiscordHookSite/common/tooltip/TooltipManager.ts"],"names":["action","observable","getUniqueId","TooltipManager","add","tooltip","id","tooltips","push","index","findIndex","splice"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,MAAT,EAAiBC,UAAjB,QAAmC,MAAnC;AACA,SAASC,WAAT,QAA4B,cAA5B;AAGA,WAAaC,cAAb,sBAAO,MAAMA,cAAN,CAAqB;AAAA;AAAA;AAAA;;AAGlBC,EAAAA,GAAR,CAAYC,OAAZ,EAA0C;AACxC,UAAMC,EAAE,GAAGJ,WAAW,EAAtB;AAEA,SAAKK,QAAL,CAAcC,IAAd,iCACKH,OADL;AAEEC,MAAAA;AAFF;AAKA,WAAO,MAAM;AACX,YAAMG,KAAK,GAAG,KAAKF,QAAL,CAAcG,SAAd,CAAwBL,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeA,EAAlD,CAAd;;AACA,UAAIG,KAAK,IAAI,CAAb,EAAgB;AACd,aAAKF,QAAL,CAAcI,MAAd,CAAqBF,KAArB,EAA4B,CAA5B;AACD;AACF,KALD;AAMD;;AAjByB,CAA5B,kFACGR,UADH;AAAA;AAAA;AAAA;AAAA;AAAA,WACoC,EADpC;AAAA;AAAA,wDAGGD,MAHH","sourcesContent":["import { action, observable } from \"mobx\"\r\nimport { getUniqueId } from \"../state/uid\"\r\nimport type { Tooltip } from \"./Tooltip\"\r\n\r\nexport class TooltipManager {\r\n  @observable tooltips: Tooltip[] = []\r\n\r\n  @action add(tooltip: Omit<Tooltip, \"id\">) {\r\n    const id = getUniqueId()\r\n\r\n    this.tooltips.push({\r\n      ...tooltip,\r\n      id,\r\n    })\r\n\r\n    return () => {\r\n      const index = this.tooltips.findIndex(tooltip => tooltip.id === id)\r\n      if (index >= 0) {\r\n        this.tooltips.splice(index, 1)\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}