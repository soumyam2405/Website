import { Component } from "react";
import { Field, Form, FieldAccessor } from "../src/index";
declare const form: Form<import("mobx-state-tree").IModelType<{
    foo: import("mobx-state-tree").ISimpleType<string>;
    a: import("mobx-state-tree").ISimpleType<number>;
    b: import("mobx-state-tree").ISimpleType<number>;
    derived: import("mobx-state-tree").ISimpleType<number>;
    textarea: import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>;
}, {
    readonly calculated: number;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, {
    foo: Field<string, string>;
    a: Field<string, number>;
    b: Field<string, number>;
    derived: Field<string, any>;
    textarea: Field<string, import("mobx").IObservableArray<string>>;
}, import("../src").GroupDefinition<{
    foo: Field<string, string>;
    a: Field<string, number>;
    b: Field<string, number>;
    derived: Field<string, any>;
    textarea: Field<string, import("mobx").IObservableArray<string>>;
}>>;
export declare class MyInput extends Component<{
    type: string;
    field: FieldAccessor<any, any>;
}> {
    render(): JSX.Element;
}
export declare class MyTextArea extends Component<{
    field: FieldAccessor<any, any>;
}> {
    render(): JSX.Element;
}
declare type MyFormProps = {};
export declare class MyForm extends Component<MyFormProps> {
    formState: typeof form.FormStateType;
    constructor(props: MyFormProps);
    handleSave: () => void;
    render(): JSX.Element;
}
export {};
