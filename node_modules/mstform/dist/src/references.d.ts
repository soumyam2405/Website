import { IReactionDisposer } from "mobx";
import { Instance, IAnyModelType } from "mobx-state-tree";
import { ISource, Query } from "./source";
export interface IReferences<T extends IAnyModelType, SQ extends Query, DQ extends Query> {
    autoLoadReaction(): IReactionDisposer;
    clearAutoLoadReaction(): void;
    load(searchQuery?: SQ): Promise<Instance<T>[]>;
    loadWithTimestamp(timestamp: number, searchQuery?: SQ): Promise<Instance<T>[]>;
    values(searchQuery?: SQ): Instance<T>[] | undefined;
    getById(id: any): Instance<T> | undefined;
    isEnabled(): boolean;
}
export interface DependentQuery<DQ> {
    (): DQ;
}
export declare class References<T extends IAnyModelType, SQ extends Query, DQ extends Query> implements IReferences<T, SQ, DQ> {
    source: ISource<T, SQ & DQ>;
    dependentQuery: DependentQuery<DQ>;
    constructor(source: ISource<T, SQ & DQ>, dependentQuery?: DependentQuery<DQ>);
    _autoLoadDisposer: IReactionDisposer | undefined;
    autoLoadReaction(): IReactionDisposer;
    clearAutoLoadReaction(): void;
    getFullQuery(searchQuery?: SQ): SQ & DQ;
    loadWithTimestamp(timestamp: number, searchQuery?: SQ): Promise<Instance<T>[]>;
    load(searchQuery?: SQ): Promise<Instance<T>[]>;
    values(searchQuery?: SQ): Instance<T>[] | undefined;
    getById(id: any): Instance<T> | undefined;
    isEnabled(): boolean;
}
export declare class NoReferences<SQ extends Query, DQ extends Query> implements IReferences<any, SQ, DQ> {
    autoLoadReaction(): IReactionDisposer;
    clearAutoLoadReaction(): void;
    loadWithTimestamp(timestamp: number, searchQuery?: SQ): Promise<Instance<IAnyModelType>[]>;
    load(searchQuery?: SQ): Promise<Instance<IAnyModelType>[]>;
    values(searchQuery?: SQ): Instance<IAnyModelType>[] | undefined;
    getById(id: any): Instance<IAnyModelType>;
    isEnabled(): boolean;
}
