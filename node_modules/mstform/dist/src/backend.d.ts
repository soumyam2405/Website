import { IAnyModelType, Instance } from "mobx-state-tree";
import { ChangeTracker, DebounceOptions } from "./changeTracker";
import { Message } from "./validationMessages";
import { FormState } from "./state";
declare type Update = {
    path: string;
    value?: any;
    inclusion?: any;
    model_key?: string;
};
export declare type AccessUpdate = {
    path: string;
    readOnly?: boolean;
    disabled?: boolean;
    hidden?: boolean;
    required?: boolean;
};
declare type ValidationInfo = {
    id: string;
    messages: Message[];
};
export declare type ProcessResult = {
    updates: Update[];
    accessUpdates: AccessUpdate[];
    errorValidations: ValidationInfo[];
    warningValidations: ValidationInfo[];
};
export interface SaveFunc<M> {
    (node: Instance<M>): Promise<Partial<ProcessResult> | undefined | null>;
}
export interface Process<M> {
    (node: Instance<M>, path: string, liveOnly: boolean): Promise<Partial<ProcessResult>>;
}
export interface ProcessAll<M> {
    (node: Instance<M>, liveOnly: boolean): Promise<Partial<ProcessResult>>;
}
export interface ApplyUpdate {
    (node: Instance<IAnyModelType>, update: any): void;
}
export declare type ProcessorOptions = {
    applyUpdate?: ApplyUpdate;
} & Partial<DebounceOptions>;
export declare class Backend<M extends IAnyModelType> {
    state: FormState<any, any, M>;
    node: Instance<M>;
    save?: SaveFunc<M> | undefined;
    process?: Process<M> | undefined;
    processAll?: ProcessAll<M> | undefined;
    changeTracker: ChangeTracker;
    applyUpdate: ApplyUpdate;
    constructor(state: FormState<any, any, M>, node: Instance<M>, save?: SaveFunc<M> | undefined, process?: Process<M> | undefined, processAll?: ProcessAll<M> | undefined, { debounce, delay, applyUpdate }?: ProcessorOptions);
    run(path: string): void;
    runProcessResult(processResult: ProcessResult): void;
    realSave(): Promise<boolean>;
    realProcessAll(liveOnly?: boolean): Promise<void>;
    clearValidations(): Promise<void>;
    realProcess(path: string): Promise<void>;
    isFinished(): Promise<void>;
}
export {};
