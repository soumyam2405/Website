import { IObservableArray } from "mobx";
import { IAnyModelType, Instance } from "mobx-state-tree";
import { Decimal } from "decimal.js-light";
import { Converter, ConverterOrFactory, IConverter } from "./converter";
import { dynamic } from "./dynamic-converter";
import { DecimalOptions } from "./decimalParser";
export declare class StringConverter<V> extends Converter<string, V> {
    defaultControlled: import("./controlled").Controlled;
}
declare type StringOptions = {
    maxLength?: number;
};
declare type NumberOptions = {};
declare function number(options?: NumberOptions): StringConverter<number>;
declare type IntegerOptions = {};
declare function integer(options?: IntegerOptions): StringConverter<number>;
declare type BooleanOptions = {};
declare function boolean(options?: BooleanOptions): Converter<boolean, boolean>;
declare type StringArrayOptions = {};
declare function stringArray(options?: StringArrayOptions): Converter<string[], IObservableArray<string>>;
declare type TextStringArrayOptions = {};
declare function textStringArray(options?: TextStringArrayOptions): Converter<string, IObservableArray<string>>;
declare function maybe<R, V>(converter: StringConverter<V> | (() => StringConverter<V>)): IConverter<string, V | undefined>;
declare function maybe<M>(converter: ConverterOrFactory<M | null, M | undefined>): IConverter<M | null, M | undefined>;
declare function maybeNull<R, V>(converter: StringConverter<V> | (() => StringConverter<V>)): IConverter<string, V | null>;
declare function maybeNull<M>(converter: ConverterOrFactory<M | null, M | null>): IConverter<M | null, M | null>;
declare function model<M extends IAnyModelType>(model: M): Converter<Instance<M> | null, Instance<M>>;
export declare const converters: {
    string: import("./converter").PartialConverterFactory<StringOptions, string, string>;
    number: typeof number;
    integer: typeof integer;
    stringDecimal: import("./converter").PartialConverterFactory<DecimalOptions, string, string>;
    decimal: import("./converter").PartialConverterFactory<DecimalOptions, string, Decimal>;
    boolean: typeof boolean;
    textStringArray: typeof textStringArray;
    stringArray: typeof stringArray;
    maybe: typeof maybe;
    maybeNull: typeof maybeNull;
    model: typeof model;
    object: Converter<any, any>;
    dynamic: typeof dynamic;
};
export {};
