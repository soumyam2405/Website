interface ProcessChange {
    (path: string): Promise<any>;
}
export interface DebounceFunc {
    (f: any, delay: number): void;
}
export declare type DebounceOptions = {
    debounce: DebounceFunc;
    delay: number;
};
declare class DebounceProcess {
    func: (path: string) => void;
    debounced: Map<string, any>;
    debounce: DebounceFunc;
    delay: number;
    constructor(func: (path: string) => void, { debounce, delay }: Partial<DebounceOptions>);
    run(path: string): void;
}
export declare class ChangeTracker {
    process: ProcessChange;
    changed: Map<string, void>;
    requests: string[];
    isProcessing: boolean;
    processingPromise: Promise<void>;
    debounceProcess: DebounceProcess;
    constructor(process: ProcessChange, options: Partial<DebounceOptions>);
    change(path: string): void;
    startChange(path: string): void;
    finishChange(path: string): void;
    makeRequest(path: string): void;
    processRequests(): Promise<void>;
    hasChanged(path: string): boolean;
    isFinished(): Promise<void>;
}
export {};
