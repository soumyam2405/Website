import { IAnyModelType, Instance } from "mobx-state-tree";
import { FormDefinition, RepeatingForm, GroupDefinition } from "./form";
import { FormState } from "./state";
import { AccessorBase } from "./accessor-base";
import { ValidateOptions } from "./validate-options";
import { ExternalMessages } from "./validationMessages";
import { IAccessor, IRepeatingFormIndexedAccessor, IRepeatingFormAccessor, IFormAccessor } from "./interfaces";
export declare class RepeatingFormAccessor<D extends FormDefinition<M>, G extends GroupDefinition<D>, M extends IAnyModelType> extends AccessorBase implements IRepeatingFormAccessor<D, G, M> {
    state: FormState<any, any, any>;
    repeatingForm: RepeatingForm<D, G>;
    parent: IFormAccessor<any, any, any>;
    name: string;
    repeatingFormIndexedAccessors: Map<number, IRepeatingFormIndexedAccessor<D, G, M>>;
    externalErrors: ExternalMessages;
    externalWarnings: ExternalMessages;
    constructor(state: FormState<any, any, any>, repeatingForm: RepeatingForm<D, G>, parent: IFormAccessor<any, any, any>, name: string);
    get path(): string;
    get value(): Instance<M>[];
    validate(options?: ValidateOptions): boolean;
    get isValid(): boolean;
    get addMode(): boolean;
    initialize(): void;
    createFormIndexedAccessor(index: number): void;
    index(index: number): IRepeatingFormIndexedAccessor<D, G, M>;
    get accessors(): IRepeatingFormIndexedAccessor<D, G, M>[];
    accessBySteps(steps: string[]): IAccessor | undefined;
    insert(index: number, node: Instance<M>, addModeDefaults?: string[]): void;
    push(node: Instance<M>, addModeDefaults?: string[]): void;
    remove(node: Instance<M>): void;
    removeIndex(index: number): void;
    addIndex(index: number): void;
    private executeRenumber;
    get length(): number;
}
