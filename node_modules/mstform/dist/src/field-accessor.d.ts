import { IReactionDisposer } from "mobx";
import { Field, ProcessOptions } from "./form";
import { FormState } from "./state";
import { ValidateOptions } from "./validate-options";
import { IReferences } from "./references";
import { IAccessor, IFormAccessor } from "./interfaces";
import { AccessorBase } from "./accessor-base";
export declare class FieldAccessor<R, V> extends AccessorBase implements IAccessor {
    state: FormState<any, any, any>;
    field: Field<R, V>;
    name: string;
    _raw: R | undefined;
    _value: V;
    _disposer: IReactionDisposer | undefined;
    references: IReferences<any, any, any>;
    constructor(state: FormState<any, any, any>, field: Field<R, V>, parent: IFormAccessor<any, any, any>, name: string);
    get path(): string;
    dispose(): void;
    clear(): void;
    get fieldref(): string;
    get context(): any;
    get isEmpty(): boolean;
    get isEmptyAndRequired(): boolean;
    createDerivedReaction(): void;
    get node(): any;
    get addMode(): boolean;
    get raw(): R;
    setValue(value: V): void;
    setValueAndRawWithoutChangeEvent(value: V): void;
    get value(): V;
    get required(): boolean;
    validate(options?: ValidateOptions): boolean;
    get isInternallyValid(): boolean;
    get isValid(): boolean;
    get requiredError(): string;
    setRaw(raw: R, options?: ProcessOptions): void;
    setRawFromValue(): void;
    setValueAndUpdateRaw(value: V): void;
    setError(error: string): void;
    handleChange: (...args: any[]) => void;
    handleFocus: (event: any) => void;
    handleBlur: (event: any) => void;
    get inputProps(): any;
    get validationProps(): object;
    accessBySteps(steps: string[]): IAccessor;
}
