import { IAnyModelType, Instance } from "mobx-state-tree";
import { FormDefinition, GroupDefinition } from "./form";
import { FormState } from "./state";
import { FormAccessorBase } from "./form-accessor-base";
import { ISubFormAccessor, IFormAccessor } from "./interfaces";
export declare class SubFormAccessor<D extends FormDefinition<M>, G extends GroupDefinition<D>, M extends IAnyModelType> extends FormAccessorBase<D, G, M> implements ISubFormAccessor<D, G, M> {
    state: FormState<any, any, any>;
    parent: IFormAccessor<any, any, any>;
    name: string;
    constructor(state: FormState<any, any, any>, definition: D, groupDefinition: G | undefined, parent: IFormAccessor<any, any, any>, name: string);
    get path(): string;
    get value(): Instance<M>;
    get isValid(): boolean;
}
