import { IAnyModelType, Instance } from "mobx-state-tree";
import { SubForm, Field, FormDefinition, RepeatingForm, GroupDefinition, Group } from "./form";
import { FieldAccess, RepeatingFormAccess, SubFormAccess, GroupAccess } from "./accessor";
import { FieldAccessor } from "./field-accessor";
import { GroupAccessor } from "./group-accessor";
import { ValidateOptions } from "./validate-options";
import { IAccessor, IFormAccessor, ISubFormAccessor, IRepeatingFormAccessor, IParentAccessor } from "./interfaces";
import { AccessorBase } from "./accessor-base";
export declare abstract class FormAccessorBase<D extends FormDefinition<M>, G extends GroupDefinition<D>, M extends IAnyModelType> extends AccessorBase implements IFormAccessor<D, G, M> {
    definition: any;
    groupDefinition: any;
    keys: (keyof D)[];
    fieldAccessors: Map<keyof D, FieldAccessor<any, any>>;
    repeatingFormAccessors: Map<keyof D, IRepeatingFormAccessor<any, any, any>>;
    subFormAccessors: Map<keyof D, ISubFormAccessor<any, any, any>>;
    groupAccessors: Map<keyof G, GroupAccessor<any>>;
    abstract path: string;
    constructor(definition: any, groupDefinition: any, parent: IParentAccessor, addMode: boolean);
    validate(options?: ValidateOptions): boolean;
    dispose(): void;
    get value(): Instance<M>;
    get isValid(): boolean;
    get accessors(): IAccessor[];
    setAddModeDefaults(addModeDefaults: string[]): void;
    get addMode(): boolean;
    access(name: string): IAccessor | undefined;
    accessBySteps(steps: string[]): IAccessor | undefined;
    initialize(): void;
    createField<K extends keyof D>(name: K, field: Field<any, any>): void;
    field<K extends keyof D>(name: K): FieldAccess<D, K>;
    createRepeatingForm<K extends keyof D>(name: K, repeatingForm: RepeatingForm<any, any>): void;
    repeatingForm<K extends keyof D>(name: K): RepeatingFormAccess<D, K, M>;
    createSubForm<K extends keyof D>(name: K, subForm: SubForm<any, any>): void;
    subForm<K extends keyof D>(name: K): SubFormAccess<D, K, M>;
    createGroup<K extends keyof G>(name: K, group: Group<any>): void;
    group<K extends keyof G>(name: K): GroupAccess<D>;
    repeatingField(name: string): any;
}
