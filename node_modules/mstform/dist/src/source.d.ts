import { IMSTMap, IAnyModelType, Instance, SnapshotIn } from "mobx-state-tree";
export declare type Query = {};
export interface ISource<T extends IAnyModelType, Q extends Query> {
    load(query?: Q, timestamp?: number): Promise<Instance<T>[]>;
    values(query?: Q): Instance<T>[] | undefined;
    getById(id: any): Instance<T> | undefined;
}
interface GetId<T> {
    (o: SnapshotIn<T>): string;
}
interface Load<T, Q extends Query> {
    (q: Q): Promise<SnapshotIn<T>[]>;
}
interface KeyForQuery<Q extends Query> {
    (q: Q): string;
}
interface CacheEntry<T> {
    timestamp: number;
    values: Instance<T>[];
}
declare type EntryMap<T extends IAnyModelType> = IMSTMap<T>;
interface EntryMapFunc<T extends IAnyModelType> {
    (): EntryMap<T>;
}
declare type GetEntryMap<T extends IAnyModelType> = EntryMap<T> | EntryMapFunc<T>;
export declare class Source<T extends IAnyModelType, Q extends Query> implements ISource<T, Q> {
    _entryMap: GetEntryMap<T>;
    _load: Load<T, Q>;
    _getId: GetId<T>;
    _keyForQuery: KeyForQuery<Q>;
    _cacheDuration: number;
    _cache: Map<string, CacheEntry<T>>;
    _existingLoadPromises: Map<string, Promise<SnapshotIn<T>[]>>;
    constructor({ entryMap, load, getId, keyForQuery, cacheDuration }: {
        entryMap: GetEntryMap<T>;
        load: Load<T, Q>;
        getId?: GetId<T>;
        keyForQuery?: KeyForQuery<Q>;
        cacheDuration?: number;
        mapPropertyName?: string;
        defaultQuery?: () => Q;
    });
    get entryMap(): EntryMap<T>;
    getById(id: any): Instance<T> | undefined;
    addOrUpdate(item: SnapshotIn<T>): Instance<T>;
    setCache(key: string, values: Instance<T>[], timestamp: number): void;
    getFullQuery(q?: Q): Q;
    load(q?: Q, timestamp?: number): Promise<Instance<T>[]>;
    loadReusePromise(q: Q): Promise<SnapshotIn<T>[]>;
    values(q?: Q): Instance<T>[] | undefined;
    clear(): void;
}
export {};
