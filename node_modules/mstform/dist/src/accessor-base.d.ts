import { ExternalMessages } from "./validationMessages";
import { FormState } from "./state";
import { ValidateOptions } from "./validate-options";
import { IAccessor, IParentAccessor } from "./interfaces";
import { AccessUpdate } from "./backend";
export declare abstract class AccessorBase implements IAccessor {
    parent: IParentAccessor;
    protected _error?: string;
    protected _addMode: boolean;
    private _isReadOnly;
    private _isDisabled;
    private _isHidden;
    protected _isRequired: boolean;
    externalErrors: ExternalMessages;
    externalWarnings: ExternalMessages;
    abstract state: FormState<any, any, any>;
    abstract path: string;
    abstract addMode: boolean;
    abstract value: any;
    abstract isValid: boolean;
    abstract accessBySteps(steps: string[]): IAccessor | undefined;
    abstract validate(options?: ValidateOptions): boolean;
    constructor(parent: IParentAccessor);
    get context(): any;
    get fieldref(): string;
    get errorValue(): string | undefined;
    get error(): string | undefined;
    get warningValue(): string | undefined;
    get warning(): string | undefined;
    get isWarningFree(): boolean;
    get readOnly(): boolean;
    get disabled(): boolean;
    get hidden(): boolean;
    get required(): boolean;
    get inputAllowed(): boolean;
    get accessors(): IAccessor[];
    get flatAccessors(): IAccessor[];
    dispose(): void;
    clear(): void;
    setAccess(update: AccessUpdate): void;
    clearError(): void;
}
